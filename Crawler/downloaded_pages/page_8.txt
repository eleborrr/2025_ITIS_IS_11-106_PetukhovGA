Пропустить и перейти к основному содержимому Этот браузер больше не поддерживается. Выполните обновление до Microsoft Edge, чтобы воспользоваться новейшими функциями, обновлениями для системы безопасности и технической поддержкой. Скачать Microsoft Edge Дополнительные сведения об Internet Explorer и Microsoft Edge Оглавление Выйти из режима фокусировки Прочитать на английском Добавить Оглавление Прочитать на английском Добавить Добавить в план Поделиться через Facebook x.com LinkedIn Адрес электронной почты Печать Оглавление Руководство. Начало работы со Razor страницами в ASP.NET Core Статья11/06/2024 Участники: 20 Обратная связь Примечание. Это не последняя версия этой статьи. В текущем выпуске см . версию .NET 9 этой статьи. Предупреждение Эта версия ASP.NET Core больше не поддерживается. Дополнительные сведения см. в политике поддержки .NET и .NET Core. В текущем выпуске см . версию .NET 9 этой статьи. Внимание Эта информация относится к предварительному выпуску продукта, который может быть существенно изменен до его коммерческого выпуска. Майкрософт не предоставляет никаких гарантий, явных или подразумеваемых, относительно приведенных здесь сведений. В текущем выпуске см . версию .NET 9 этой статьи. Автор: Рик Андерсон (Rick Anderson) В этом первом руководстве серии приводятся основные сведения о веб-приложении Razor Pages в ASP.NET Core. Дополнительные сведения, предназначенные для разработчиков, которые знакомы с контроллерами и представлениями, см. в статье Введение в Razor Pages. Общие сведения см. в разделе Entity Framework Core для начинающих. Если вы новичок в разработке на ASP.NET&nbsp;Core и не знаете, какое решение для пользовательского веб-интерфейса подойдет вам, см. статью Выбор пользовательского интерфейса ASP.NET Core. В конце этого руководства у вас будет Razor веб-приложение Pages, которое управляет базой данных фильмов. Необходимые компоненты Visual Studio Visual Studio Code Visual Studio&nbsp;2022 с рабочей нагрузкой ASP.NET и веб-разработка. Visual Studio Code Комплект средств разработки C# для Visual Studio Code Пакет SDK для .NET 9.0 Вы можете следовать инструкциям Visual Studio Code в macOS, Linux или Windows. Изменения могут потребоваться при использовании интегрированной среды разработки (IDE), отличной от Visual Studio Code. Создание веб-приложения Razor Pages Visual Studio Visual Studio Code Запустите Visual Studio и выберите новый проект. В диалоговом окне "Создание проекта" выберите ASP.NET Core Web App (RazorPages)&gt;Next. В диалоговом окне Настроить новый проект введите RazorPagesMovie в поле Имя проекта. Важно присвоить проекту RazorPagesMovie, включая сопоставление прописной буквы, поэтому пространства имен будут соответствовать при копировании и вставке примера кода. Выберите Далее. В диалоговом окне Дополнительные сведения выполните следующие действия. Выберите .NET 9.0. Убедитесь, что не используйте операторы верхнего уровня, снятые. Нажмите кнопку создания. Создается следующий начальный проект: Альтернативные подходы к созданию проекта см. в статье Создание проекта в Visual Studio. В этом руководстве предполагается, что вы умеете работать с VS&nbsp;Code. Дополнительные сведения см. в статье Начало работы с VS&nbsp;Code. Выберите новый терминал в меню терминала , чтобы открыть интегрированный терминал. Перейдите в каталог cd, в котором будет находиться проект. Выполните следующие команды: dotnet new webapp -o RazorPagesMovie code -r RazorPagesMovie Команда dotnet new создает новый проект Razor Pages в папке RazorPagesMovie. Команда code открывает папку RazorPagesMovie в текущем экземпляре Visual Studio Code. Visual Studio Code может отобразить диалоговое окно с запросом: доверяете авторам файлов в этой папке? Если вы доверяете всем файлам в родительской папке, выберите "Доверять авторам всех файлов" в родительской папке. Выберите "Да", я доверяю авторам , так как папка проекта содержит файлы, созданные .NET. Когда Visual Studio Code запрашивает добавление ресурсов для сборки и отладки проекта, нажмите кнопку "Да". Если Visual Studio Code не предлагает добавлять ресурсы сборки и отладки, выберите представление&gt;палитры команд и введите ".NET" в поле поиска. В списке команд выберите .NET: Generate Assets for Build and Debug команду. Visual Studio Code добавляет папку .vscode с созданными и launch.json файламиtasks.json. Выполнить приложение Visual Studio Visual Studio Code Выберите RazorPagesMovie в Обозреватель решений и нажмите клавиши CTRL+F5, чтобы запустить приложение без отладчика. Visual Studio отображает следующее диалоговое окно, если проект еще не настроен для использования&nbsp;SSL: Выберите Да, чтобы сделать SSL-сертификат IIS Express доверенным. Отобразится следующее диалоговое окно. Выберите Да, если согласны доверять сертификату разработки. Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. Visual Studio: Запускает приложение, которое запускает сервер Kestrel. Запускает браузер по умолчанию по адресу https://localhost:&lt;port&gt;, который отображает пользовательский интерфейс приложений. &lt;port&gt; — случайный порт, назначенный при создании приложения. Закройте окно браузера. Настройте доверие сертификату разработки HTTPS с помощью следующей команды: dotnet dev-certs https --trust Для предыдущей команды требуется пакет SDK для .NET 9 или более поздней версии в Linux. Для Linux в пакете SDK для .NET 8.0.401 и более ранних версий см. документацию по дистрибутиву Linux для доверия к сертификату. Приведенная выше команда отображает следующее диалоговое окно, если сертификат не был ранее&nbsp;доверенным: Выберите Да, если согласны доверять сертификату разработки. Дополнительные сведения см. в разделе "Доверие" в разделе сертификатов разработки ASP.NET Core HTTPS статьи "Принудительное применение SSL ". Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. В Visual Studio Code нажмите клавиши CTRL+F5, чтобы запустить приложение без отладки. В командной строке выбора отладчика выберите C#. В командной строке "Выбрать запуск конфигурации" выберите C#: RazorPagesMovie [https] RazorPagesMovie. Браузер по умолчанию запускается со следующим URL-адресом: https://localhost:&lt;port&gt; где &lt;port&gt; случайным образом создается номер порта. Закройте окно браузера. В Visual Studio Code в меню "Запуск" выберите "Остановить отладку" или нажмите клавиши SHIFT+F5, чтобы остановить приложение. Анализ файлов проекта В разделах ниже приведен обзор основных папок и файлов проекта, с которыми вы будете работать в последующих учебниках. Папка Pages Содержит страницы Razor и вспомогательные файлы. Каждая страница Razor&nbsp;— это пара файлов. Файл .cshtml с разметкой HTML и кодом C# использует синтаксис Razor. .cshtml.cs Файл с кодом C#, который обрабатывает события страницы. Имена вспомогательных файлов начинаются с символа подчеркивания. Например, _Layout.cshtml файл настраивает элементы пользовательского интерфейса, общие для всех страниц. _Layout.cshtml настраивает меню навигации в верхней части страницы и уведомление об авторских правах в нижней части страницы. Подробные сведения см. в статье Макет в ASP.NET Core. Папка wwwroot Содержит статические ресурсы, такие как HTML-файлы, файлы JavaScript и CSS-файлы. Подробные сведения см. в статье Статические файлы в ASP.NET Core. appsettings.json Содержит данные конфигурации, например строки подключения. Дополнительные сведения см. в разделе Конфигурация в ASP.NET Core. Program.cs Содержит следующий код: var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddRazorPages(); var app = builder.Build(); // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler("/Error"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } app.UseHttpsRedirection(); app.UseRouting(); app.UseAuthorization(); app.MapStaticAssets(); app.MapRazorPages(); app.Run(); Следующие строки кода в этом файле создают WebApplicationBuilder предварительно настроенные значения по умолчанию, добавляют Razor поддержку Pages в контейнер внедрения зависимостей (DI) и создают приложение: var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddRazorPages(); var app = builder.Build(); Страница со сведениями об исключении для разработчика включена по умолчанию и содержит полезную информацию об исключениях. Рабочие приложения не следует запускать в режиме разработки, поскольку на странице со сведениями об исключении для разработчика может находиться конфиденциальная информация. В следующем коде для конечной точки устанавливаются исключения /Error и включается протокол HSTS, если приложение не запущено в режиме разработки: // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler("/Error"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } Например, приведенный выше код выполняется, когда приложение находится в рабочем или тестовом режиме. Дополнительные сведения см. в статье Использование нескольких сред в ASP.NET Core. Следующий код включает различное ПО промежуточного слоя: app.UseHttpsRedirection();: перенаправляет все запросы HTTP на HTTPS. app.UseRouting();: добавляет соответствие маршрута в конвейер ПО промежуточного слоя. Подробные сведения см. в статье Маршрутизация в ASP.NET Core. app.UseAuthorization();: разрешает пользователю доступ к защищенным ресурсам. Это приложение не использует авторизацию, поэтому эту строку можно удалить. app.MapRazorPages();: настраивает маршрутизацию конечных точек для Razor Pages. app.MapStaticAssets();. Оптимизация доставки статических ресурсов в приложении, таких как HTML, CSS, изображения и JavaScript. Дополнительные сведения см. в статье "Новые возможности" в ASP.NET Core 9.0. app.Run();: запускает приложение. Устранение неполадок с завершенным&nbsp;примером Если вы столкнулись с проблемой, которую не можете решить, сравните свой код с кодом готового проекта. Просмотрите или скачайте завершенный проект (порядок загрузки). Следующие шаги Далее: добавление модели В этом первом руководстве серии приводятся основные сведения о веб-приложении Razor Pages в ASP.NET Core. Дополнительные сведения, предназначенные для разработчиков, которые знакомы с контроллерами и представлениями, см. в статье Введение в Razor Pages. Общие сведения см. в разделе Entity Framework Core для начинающих. Если вы новичок в разработке на ASP.NET&nbsp;Core и не знаете, какое решение для пользовательского веб-интерфейса подойдет вам, см. статью Выбор пользовательского интерфейса ASP.NET Core. В конце этого руководства у вас будет Razor веб-приложение Pages, которое управляет базой данных фильмов. Необходимые компоненты Visual Studio Visual Studio Code Visual Studio для Mac Visual Studio&nbsp;2022 с рабочей нагрузкой ASP.NET и веб-разработка. Visual Studio Code C# для Visual Studio Code (последняя версия) Пакет SDK для .NET 8.0 Для функций разработки ASP.NET Core, таких как создание проекта, в инструкциях Visual Studio Code используется .NET&nbsp;CLI. Эти инструкции можно выполнять на macOS, Linux или Windows и в любом редакторе кода. При использовании редактора, отличного от Visual Studio Code, может потребоваться внести незначительные изменения. Visual Studio 2022 для Mac (последняя версия) Внимание Корпорация Майкрософт объявила о прекращении работы Visual Studio для Mac. Visual Studio для Mac больше не будет поддерживаться с 31 августа 2024 г. Ниже представлены возможные альтернативы. Visual Studio Code с набором средств разработки C# и связанными расширениями, такими как .NET MAUI и Unity. Интегрированная среда разработки Visual Studio, запущенная в Windows на виртуальной машине Mac. Интегрированная среда разработки Visual Studio, запущенная в Windows на виртуальной машине в облаке. Дополнительные сведения см. в Visual Studio для Mac объявлении о выходе на пенсию. Создание веб-приложения Razor Pages Visual Studio Visual Studio Code Visual Studio для Mac Запустите Visual Studio и выберите новый проект. В диалоговом окне "Создание проекта" выберите ASP.NET Core Web App (RazorPages)&gt;Next. В диалоговом окне Настроить новый проект введите RazorPagesMovie в поле Имя проекта. Важно присвоить проекту RazorPagesMovie, включая сопоставление прописной буквы, поэтому пространства имен будут соответствовать при копировании и вставке примера кода. Выберите Далее. В диалоговом окне Дополнительные сведения выполните следующие действия. Выберите .NET 8.0 (долгосрочная поддержка). Убедитесь, что не используйте операторы верхнего уровня, снятые. Нажмите кнопку создания. Создается следующий начальный проект: Альтернативные подходы к созданию проекта см. в статье Создание проекта в Visual Studio. В этом руководстве предполагается, что вы умеете работать с VS&nbsp;Code. Дополнительные сведения см. в статье Начало работы с VS&nbsp;Code. Выберите новый терминал в меню терминала , чтобы открыть интегрированный терминал. Перейдите в каталог cd, в котором будет находиться проект. Выполните следующие команды: dotnet new webapp -o RazorPagesMovie code -r RazorPagesMovie Команда dotnet new создает новый проект Razor Pages в папке RazorPagesMovie. Команда code открывает папку RazorPagesMovie в текущем экземпляре Visual Studio Code. Visual Studio Code может отобразить диалоговое окно с запросом: доверяете авторам файлов в этой папке? Если вы доверяете всем файлам в родительской папке, выберите "Доверять авторам всех файлов" в родительской папке. Выберите "Да", я доверяю авторам , так как папка проекта содержит файлы, созданные .NET. Когда Visual Studio Code запрашивает добавление ресурсов для сборки и отладки проекта, нажмите кнопку "Да". Если Visual Studio Code не предлагает добавлять ресурсы сборки и отладки, выберите представление&gt;палитры команд и введите ".NET" в поле поиска. В списке команд выберите .NET: Generate Assets for Build and Debug команду. Visual Studio Code добавляет папку .vscode с созданными и launch.json файламиtasks.json. В Visual Studio для Mac 2022 выберите файл&gt;нового проекта.... В диалоговом окне "Выбор шаблона" для нового проекта: Выберите веб-приложение и консольное&gt;веб-приложение приложения.&gt; Выберите Продолжить. В диалоговом окне Настройка нового веб-приложения сделайте следующее: Проверьте: целевая платформа имеет значение .NET 8.0 (или более поздней версии). Убедитесь, что для проверки подлинности задано значение "Нет проверки подлинности". Убедитесь, что не используйте операторы верхнего уровня, снятые. Выберите Продолжить. В диалоговом окне Настройка нового веб-приложения сделайте следующее: Введите RazorPagesMovie имя проекта. Важно присвоить проекту RazorPagesMovie, включая сопоставление прописной буквы, поэтому пространства имен будут соответствовать при копировании и вставке примера кода. Нажмите кнопку создания. Выполнить приложение Visual Studio Visual Studio Code Visual Studio для Mac Выберите RazorPagesMovie в Обозреватель решений и нажмите клавиши CTRL+F5, чтобы запустить приложение без отладчика. Visual Studio отображает следующее диалоговое окно, если проект еще не настроен для использования&nbsp;SSL: Выберите Да, чтобы сделать SSL-сертификат IIS Express доверенным. Отобразится следующее диалоговое окно. Выберите Да, если согласны доверять сертификату разработки. Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. Visual Studio: Запускает приложение, которое запускает сервер Kestrel. Запускает браузер по умолчанию по адресу https://localhost:&lt;port&gt;, который отображает пользовательский интерфейс приложений. &lt;port&gt; — случайный порт, назначенный при создании приложения. Закройте окно браузера. Настройте доверие сертификату разработки HTTPS с помощью следующей команды: dotnet dev-certs https --trust Для предыдущей команды требуется пакет SDK для .NET 9 или более поздней версии в Linux. Для Linux в пакете SDK для .NET 8.0.401 и более ранних версий см. документацию по дистрибутиву Linux для доверия к сертификату. Приведенная выше команда отображает следующее диалоговое окно, если сертификат не был ранее&nbsp;доверенным: Выберите Да, если согласны доверять сертификату разработки. Дополнительные сведения см. в разделе "Доверие" в разделе сертификатов разработки ASP.NET Core HTTPS статьи "Принудительное применение SSL ". Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. В Visual Studio Code нажмите Ctrl +F5, чтобы запустить приложение без отладки. В командной строке выбора отладчика выберите .NET 5+ и .NET Core. Браузер по умолчанию запускается со следующим URL-адресом: https://localhost:&lt;port&gt; где &lt;port&gt; случайным образом создается номер порта. Закройте окно браузера. В Visual Studio Code в меню "Запуск" выберите "Остановить отладку" или нажмите клавиши SHIFT+F5, чтобы остановить приложение. Последовательно выберите Debug (Отладка) и &gt; (Начать отладку), чтобы запустить приложение. Visual Studio для Mac запускает браузер и переходит в папку https://localhost:&lt;port&gt;, где &lt;port&gt;&nbsp;— это номер порта, который случайным образом назначается при создании проекта и задается в Properties/launchSettings.json. Закройте окно браузера. Анализ файлов проекта В разделах ниже приведен обзор основных папок и файлов проекта, с которыми вы будете работать в последующих учебниках. Папка Pages Содержит страницы Razor и вспомогательные файлы. Каждая страница Razor&nbsp;— это пара файлов. Файл .cshtml с разметкой HTML и кодом C# использует синтаксис Razor. .cshtml.cs Файл с кодом C#, который обрабатывает события страницы. Имена вспомогательных файлов начинаются с символа подчеркивания. Например, _Layout.cshtml файл настраивает элементы пользовательского интерфейса, общие для всех страниц. _Layout.cshtml настраивает меню навигации в верхней части страницы и уведомление об авторских правах в нижней части страницы. Подробные сведения см. в статье Макет в ASP.NET Core. Папка wwwroot Содержит статические ресурсы, такие как HTML-файлы, файлы JavaScript и CSS-файлы. Подробные сведения см. в статье Статические файлы в ASP.NET Core. appsettings.json Содержит данные конфигурации, например строки подключения. Дополнительные сведения см. в разделе Конфигурация в ASP.NET Core. Program.cs Содержит следующий код: var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddRazorPages(); var app = builder.Build(); // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler("/Error"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); app.MapRazorPages(); app.Run(); Следующие строки кода в этом файле создают WebApplicationBuilder предварительно настроенные значения по умолчанию, добавляют Razor поддержку Pages в контейнер внедрения зависимостей (DI) и создают приложение: var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddRazorPages(); var app = builder.Build(); Страница со сведениями об исключении для разработчика включена по умолчанию и содержит полезную информацию об исключениях. Рабочие приложения не следует запускать в режиме разработки, поскольку на странице со сведениями об исключении для разработчика может находиться конфиденциальная информация. В следующем коде для конечной точки устанавливаются исключения /Error и включается протокол HSTS, если приложение не запущено в режиме разработки: // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler("/Error"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } Например, приведенный выше код выполняется, когда приложение находится в рабочем или тестовом режиме. Дополнительные сведения см. в статье Использование нескольких сред в ASP.NET Core. Следующий код включает различное ПО промежуточного слоя: app.UseHttpsRedirection();: перенаправляет все запросы HTTP на HTTPS. app.UseStaticFiles();: обеспечивает обслуживание таких статических файлов, как HTML, CSS, изображения и JavaScript. Подробные сведения см. в статье Статические файлы в ASP.NET Core. app.UseRouting();: добавляет соответствие маршрута в конвейер ПО промежуточного слоя. Дополнительные сведения см. в статье Маршрутизация в ASP.NET Core. app.MapRazorPages();: настраивает маршрутизацию конечных точек для Razor Pages. app.UseAuthorization();: разрешает пользователю доступ к защищенным ресурсам. Это приложение не использует авторизацию, поэтому эту строку можно удалить. app.Run();: запускает приложение. Устранение неполадок с завершенным&nbsp;примером Если вы столкнулись с проблемой, которую не можете решить, сравните свой код с кодом готового проекта. Просмотрите или скачайте завершенный проект (порядок загрузки). Следующие шаги Далее: добавление модели В этом первом руководстве серии приводятся основные сведения о веб-приложении Razor Pages в ASP.NET Core. Дополнительные сведения, предназначенные для разработчиков, которые знакомы с контроллерами и представлениями, см. в статье Введение в Razor Pages. Общие сведения см. в разделе Entity Framework Core для начинающих. Если вы новичок в разработке на ASP.NET&nbsp;Core и не знаете, какое решение для пользовательского веб-интерфейса подойдет вам, см. статью Выбор пользовательского интерфейса ASP.NET Core. В конце этого руководства у вас будет Razor веб-приложение Pages, которое управляет базой данных фильмов. Необходимые компоненты Visual Studio Visual Studio Code Visual Studio для Mac Visual Studio&nbsp;2022 с рабочей нагрузкой ASP.NET и веб-разработка. Visual Studio Code C# для Visual Studio Code (последняя версия) Пакет SDK для .NET&nbsp;7.0 Для функций разработки ASP.NET Core, таких как создание проекта, в инструкциях Visual Studio Code используется .NET&nbsp;CLI. Эти инструкции можно выполнять на macOS, Linux или Windows и в любом редакторе кода. При использовании редактора, отличного от Visual Studio Code, может потребоваться внести незначительные изменения. Visual Studio 2022 для Mac (последняя версия) Внимание Корпорация Майкрософт объявила о прекращении работы Visual Studio для Mac. Visual Studio для Mac больше не будет поддерживаться с 31 августа 2024 г. Ниже представлены возможные альтернативы. Visual Studio Code с набором средств разработки C# и связанными расширениями, такими как .NET MAUI и Unity. Интегрированная среда разработки Visual Studio, запущенная в Windows на виртуальной машине Mac. Интегрированная среда разработки Visual Studio, запущенная в Windows на виртуальной машине в облаке. Дополнительные сведения см. в Visual Studio для Mac объявлении о выходе на пенсию. Создание веб-приложения Razor Pages Visual Studio Visual Studio Code Visual Studio для Mac Откройте Visual Studio и выберите Создать проект. В диалоговом окне "Создание проекта" выберите ASP.NET Core Web App&gt;Next. В диалоговом окне Настроить новый проект введите RazorPagesMovie в поле Имя проекта. Важно присвоить проекту RazorPagesMovie, включая сопоставление прописной буквы, поэтому пространства имен будут соответствовать при копировании и вставке примера кода. Выберите Далее. В диалоговом окне Дополнительные сведения выполните следующие действия. Выберите .NET 7.0 (стандартная поддержка терминов). Убедитесь, что не используйте операторы верхнего уровня, снятые. Нажмите кнопку создания. Создается следующий начальный проект: Альтернативные подходы к созданию проекта см. в статье Создание проекта в Visual Studio. В этом руководстве предполагается, что вы умеете работать с VS&nbsp;Code. Дополнительные сведения см. в статье Начало работы с VS&nbsp;Code. Выберите новый терминал в меню терминала , чтобы открыть интегрированный терминал. Перейдите в каталог cd, в котором будет находиться проект. Выполните следующие команды: dotnet new webapp -o RazorPagesMovie code -r RazorPagesMovie Команда dotnet new создает новый проект Razor Pages в папке RazorPagesMovie. Команда code открывает папку проекта RazorPagesMovie в текущем экземпляре Visual Studio Code. Visual Studio Code может отобразить диалоговое окно с запросом: доверяете авторам файлов в этой папке? Если вы доверяете всем файлам в родительской папке, выберите "Доверять авторам всех файлов" в родительской папке. Выберите "Да", я доверяю авторам , так как папка проекта содержит файлы, созданные .NET. Когда Visual Studio Code запрашивает добавление ресурсов для сборки и отладки проекта, нажмите кнопку "Да". Если Visual Studio Code не предлагает добавлять ресурсы сборки и отладки, выберите представление&gt;палитры команд и введите ".NET" в поле поиска. В списке команд выберите .NET: Generate Assets for Build and Debug команду. Visual Studio Code добавляет папку .vscode с созданными и launch.json файламиtasks.json. В Visual Studio для Mac 2022 выберите файл&gt;нового проекта.... В диалоговом окне "Выбор шаблона" для нового проекта: Выберите веб-приложение и консольное&gt;веб-приложение приложения.&gt; Выберите Продолжить. В диалоговом окне Настройка нового веб-приложения сделайте следующее: Убедитесь, что целевая платформа имеет значение .NET 7.0 (или более поздней версии). Убедитесь, что для проверки подлинности задано значение "Нет проверки подлинности". Убедитесь, что не используйте операторы верхнего уровня, снятые. Выберите Продолжить. В диалоговом окне Настройка нового веб-приложения сделайте следующее: Введите RazorPagesMovie имя проекта. Важно присвоить проекту RazorPagesMovie, включая сопоставление прописной буквы, поэтому пространства имен будут соответствовать при копировании и вставке примера кода. Нажмите кнопку создания. Выполнить приложение Visual Studio Visual Studio Code Visual Studio для Mac Выберите RazorPagesMovie в Обозреватель решений и нажмите клавиши CTRL+F5, чтобы запустить приложение без отладчика. Visual Studio отображает следующее диалоговое окно, если проект еще не настроен для использования&nbsp;SSL: Выберите Да, чтобы сделать SSL-сертификат IIS Express доверенным. Отобразится следующее диалоговое окно. Выберите Да, если согласны доверять сертификату разработки. Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. Visual Studio: Запускает приложение, которое запускает сервер Kestrel. Запускает браузер по умолчанию по адресу https://localhost:&lt;port&gt;, который отображает пользовательский интерфейс приложений. &lt;port&gt; — случайный порт, назначенный при создании приложения. Закройте окно браузера. Настройте доверие сертификату разработки HTTPS с помощью следующей команды: dotnet dev-certs https --trust Для предыдущей команды требуется пакет SDK для .NET 9 или более поздней версии в Linux. Для Linux в пакете SDK для .NET 8.0.401 и более ранних версий см. документацию по дистрибутиву Linux для доверия к сертификату. Приведенная выше команда отображает следующее диалоговое окно, если сертификат не был ранее&nbsp;доверенным: Выберите Да, если согласны доверять сертификату разработки. Дополнительные сведения см. в разделе "Доверие" в разделе сертификатов разработки ASP.NET Core HTTPS статьи "Принудительное применение SSL ". Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. В Visual Studio Code нажмите клавиши CTRL+F5, чтобы запустить приложение без отладки. В командной строке выбора отладчика выберите .NET 5+ и .NET Core. Браузер по умолчанию запускается со следующим URL-адресом: https://localhost:&lt;port&gt; где &lt;port&gt; случайным образом создается номер порта. Закройте окно браузера. В Visual Studio Code в меню "Запуск" выберите "Остановить отладку" или нажмите клавиши SHIFT+F5, чтобы остановить приложение. Последовательно выберите Debug (Отладка) и &gt; (Начать отладку), чтобы запустить приложение. Visual Studio для Mac запускает браузер и переходит в папку https://localhost:&lt;port&gt;, где &lt;port&gt;&nbsp;— это номер порта, который случайным образом назначается при создании проекта и задается в Properties/launchSettings.json. Закройте окно браузера. Анализ файлов проекта В разделах ниже приведен обзор основных папок и файлов проекта, с которыми вы будете работать в последующих учебниках. Папка Pages Содержит страницы Razor и вспомогательные файлы. Каждая страница Razor&nbsp;— это пара файлов. Файл .cshtml с разметкой HTML и кодом C# использует синтаксис Razor. .cshtml.cs Файл с кодом C#, который обрабатывает события страницы. Имена вспомогательных файлов начинаются с символа подчеркивания. Например, _Layout.cshtml файл настраивает элементы пользовательского интерфейса, общие для всех страниц. _Layout.cshtml настраивает меню навигации в верхней части страницы и уведомление об авторских правах в нижней части страницы. Подробные сведения см. в статье Макет в ASP.NET Core. Папка wwwroot Содержит статические ресурсы, такие как HTML-файлы, файлы JavaScript и CSS-файлы. Подробные сведения см. в статье Статические файлы в ASP.NET Core. appsettings.json Содержит данные конфигурации, например строки подключения. Дополнительные сведения см. в разделе Конфигурация в ASP.NET Core. Program.cs Содержит следующий код: var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddRazorPages(); var app = builder.Build(); // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler("/Error"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); app.MapRazorPages(); app.Run(); Следующие строки кода в этом файле создают WebApplicationBuilder предварительно настроенные значения по умолчанию, добавляют Razor поддержку Pages в контейнер внедрения зависимостей (DI) и создают приложение: var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddRazorPages(); var app = builder.Build(); Страница со сведениями об исключении для разработчика включена по умолчанию и содержит полезную информацию об исключениях. Рабочие приложения не следует запускать в режиме разработки, поскольку на странице со сведениями об исключении для разработчика может находиться конфиденциальная информация. В следующем коде для конечной точки устанавливаются исключения /Error и включается протокол HSTS, если приложение не запущено в режиме разработки: // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler("/Error"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } Например, приведенный выше код выполняется, когда приложение находится в рабочем или тестовом режиме. Дополнительные сведения см. в статье Использование нескольких сред в ASP.NET Core. Следующий код включает различное ПО промежуточного слоя: app.UseHttpsRedirection();: перенаправляет все запросы HTTP на HTTPS. app.UseStaticFiles();: обеспечивает обслуживание таких статических файлов, как HTML, CSS, изображения и JavaScript. Подробные сведения см. в статье Статические файлы в ASP.NET Core. app.UseRouting();: добавляет соответствие маршрута в конвейер ПО промежуточного слоя. Дополнительные сведения см. в статье Маршрутизация в ASP.NET Core. app.MapRazorPages();: настраивает маршрутизацию конечных точек для Razor Pages. app.UseAuthorization();: разрешает пользователю доступ к защищенным ресурсам. Это приложение не использует авторизацию, поэтому эту строку можно удалить. app.Run();: запускает приложение. Устранение неполадок с завершенным&nbsp;примером Если вы столкнулись с проблемой, которую не можете решить, сравните свой код с кодом готового проекта. Просмотрите или скачайте завершенный проект (порядок загрузки). Следующие шаги Далее: добавление модели В этом первом руководстве серии приводятся основные сведения о веб-приложении Razor Pages в ASP.NET Core. Дополнительные сведения, предназначенные для разработчиков, которые знакомы с контроллерами и представлениями, см. в статье Введение в Razor Pages. Общие сведения см. в разделе Entity Framework Core для начинающих. Если вы новичок в разработке на ASP.NET&nbsp;Core и не знаете, какое решение для пользовательского веб-интерфейса подойдет вам, см. статью Выбор пользовательского интерфейса ASP.NET Core. Пройдя всю серию, вы получите приложение, которое управляет базой данных фильмов. Изучив это руководство, вы: Создание веб-приложения Razor Pages. Выполнить приложение. Анализ файлов проекта. Пройдя это руководство, вы получите рабочее веб-приложение Razor Pages, улучшение которого описано в последующих руководствах. Необходимые компоненты Visual Studio Visual Studio Code Visual Studio для Mac Visual Studio&nbsp;2022 с рабочей нагрузкой ASP.NET и веб-разработка. Пакет SDK для .NET&nbsp;6.0 Visual Studio Code C# для Visual Studio Code (последняя версия) Пакет SDK для .NET&nbsp;6.0 Для функций разработки ASP.NET Core, таких как создание проекта, в инструкциях Visual Studio Code используется .NET&nbsp;CLI. Эти инструкции можно выполнять на macOS, Linux или Windows и в любом редакторе кода. При использовании редактора, отличного от Visual Studio Code, может потребоваться внести незначительные изменения. Visual Studio 2022 для Mac (последняя версия) Внимание Корпорация Майкрософт объявила о прекращении работы Visual Studio для Mac. Visual Studio для Mac больше не будет поддерживаться с 31 августа 2024 г. Ниже представлены возможные альтернативы. Visual Studio Code с набором средств разработки C# и связанными расширениями, такими как .NET MAUI и Unity. Интегрированная среда разработки Visual Studio, запущенная в Windows на виртуальной машине Mac. Интегрированная среда разработки Visual Studio, запущенная в Windows на виртуальной машине в облаке. Дополнительные сведения см. в Visual Studio для Mac объявлении о выходе на пенсию. Создание веб-приложения Razor Pages Visual Studio Visual Studio Code Visual Studio для Mac Запустите Visual Studio&nbsp;2022 и нажмите Создать проект. В диалоговом окне Создать проект выберите Веб-приложение ASP.NET&nbsp;Core и нажмите Далее. В диалоговом окне Настроить новый проект введите RazorPagesMovie в поле Имя проекта. Важно присвоить проекту RazorPagesMovie, включая сопоставление прописной буквы, поэтому пространства имен будут соответствовать при копировании и вставке примера кода. Выберите Далее. В диалоговом окне Дополнительные сведения выберите .NET&nbsp;6.0 (долгосрочная поддержка) и щелкните Создать. Создается следующий начальный проект: В этом руководстве предполагается, что вы умеете работать с VS&nbsp;Code. Дополнительные сведения см. в статье Начало работы с VS&nbsp;Code. Выберите новый терминал в меню терминала , чтобы открыть интегрированный терминал. Перейдите в каталог cd, в котором будет находиться проект. Выполните следующие команды: dotnet new webapp -o RazorPagesMovie code -r RazorPagesMovie Команда dotnet new создает новый проект Razor Pages в папке RazorPagesMovie. Команда code открывает папку проекта RazorPagesMovie в текущем экземпляре Visual Studio Code. Visual Studio Code может отобразить диалоговое окно с запросом: доверяете авторам файлов в этой папке? Если вы доверяете всем файлам в родительской папке, выберите "Доверять авторам всех файлов" в родительской папке. Выберите "Да", я доверяю авторам , так как папка проекта содержит файлы, созданные .NET. Когда Visual Studio Code запрашивает добавление ресурсов для сборки и отладки проекта, нажмите кнопку "Да". Если Visual Studio Code не предлагает добавлять ресурсы сборки и отладки, выберите представление&gt;палитры команд и введите ".NET" в поле поиска. В списке команд выберите .NET: Generate Assets for Build and Debug команду. Visual Studio Code добавляет папку .vscode с созданными и launch.json файламиtasks.json. Выберите Файл&nbsp;&gt;Новое решение. В Visual Studio&nbsp;2022 для&nbsp;Mac последовательно выберите Web and Console, &gt;, Web Application, &gt; (Интернет и консоль, Приложение, Веб-приложение, Далее). В диалоговом окне Настройка нового веб-приложения сделайте следующее: Убедитесь, что в качестве Целевой платформы задана последняя версия .NET&nbsp;6.x. Убедитесь, что для параметра Аутентификация задано значение Без аутентификации. Выберите Далее. Назовите проект RazorPagesMovie и нажмите кнопку "Создать". Выполнить приложение Visual Studio Visual Studio Code Visual Studio для Mac Выберите RazorPagesMovie в Обозреватель решений, а затем нажмите клавиши CTRL+F5, чтобы запустить без отладчика. Visual Studio отображает следующее диалоговое окно, если проект еще не настроен для использования&nbsp;SSL: Выберите Да, чтобы сделать SSL-сертификат IIS Express доверенным. Отобразится следующее диалоговое окно. Выберите Да, если согласны доверять сертификату разработки. Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. Visual Studio: Запускает приложение, которое запускает сервер Kestrel. Запускает браузер по умолчанию по адресу https://localhost:5001, который отображает пользовательский интерфейс приложений. Настройте доверие сертификату разработки HTTPS с помощью следующей команды: dotnet dev-certs https --trust Для предыдущей команды требуется пакет SDK для .NET 9 или более поздней версии в Linux. Для Linux в пакете SDK для .NET 8.0.401 и более ранних версий см. документацию по дистрибутиву Linux для доверия к сертификату. Приведенная выше команда отображает следующее диалоговое окно, если сертификат не был ранее&nbsp;доверенным: Выберите Да, если согласны доверять сертификату разработки. Дополнительные сведения см. в разделе "Доверие" в разделе сертификатов разработки ASP.NET Core HTTPS статьи "Принудительное применение SSL ". Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. в Visual Studio Code нажмите клавиши CTRL&nbsp;+&nbsp;F5, чтобы запустить приложение. В командной строке Выбор среды выберите .NET Core. Запустится браузер по умолчанию со следующим URL-адресом: https://localhost:5001 Последовательно выберите Debug (Отладка) и &gt; (Начать отладку), чтобы запустить приложение. Visual Studio для Mac запускает браузер и переходит в папку https://localhost:&lt;port&gt;, где &lt;port&gt;&nbsp;— это номер порта, который случайным образом назначается при создании проекта и задается в Properties/launchSettings.json. Анализ файлов проекта В разделах ниже приведен обзор основных папок и файлов проекта, с которыми вы будете работать в последующих учебниках. Папка Pages Содержит страницы Razor и вспомогательные файлы. Каждая страница Razor&nbsp;— это пара файлов. Файл .cshtml с разметкой HTML и кодом C# использует синтаксис Razor. .cshtml.cs Файл с кодом C#, который обрабатывает события страницы. Имена вспомогательных файлов начинаются с символа подчеркивания. Например, _Layout.cshtml файл настраивает элементы пользовательского интерфейса, общие для всех страниц. Этот файл настраивает меню навигации в верхней части страницы и уведомление об авторских правах в нижней части страницы. Подробные сведения см. в статье Макет в ASP.NET Core. Папка wwwroot Содержит статические ресурсы, такие как HTML-файлы, файлы JavaScript и CSS-файлы. Подробные сведения см. в статье Статические файлы в ASP.NET Core. appsettings.json Содержит данные конфигурации, например строки подключения. Дополнительные сведения см. в разделе Конфигурация в ASP.NET Core. Program.cs Содержит следующий код: var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddRazorPages(); var app = builder.Build(); // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler("/Error"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); app.MapRazorPages(); app.Run(); В следующих строках кода в этом файле создается объект WebApplicationBuilder с предварительно настроенными значениями по умолчанию, добавляется поддержка Razor Pages в контейнер внедрения зависимостей (DI) и выполняется сборка приложения. var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddRazorPages(); var app = builder.Build(); Страница со сведениями об исключении для разработчика включена по умолчанию и содержит полезную информацию об исключениях. Рабочие приложения не следует запускать в режиме разработки, поскольку на странице со сведениями об исключении для разработчика может находиться конфиденциальная информация. В следующем коде для конечной точки устанавливаются исключения /Error и включается протокол HSTS, если приложение не запущено в режиме разработки: // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler("/Error"); // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. app.UseHsts(); } Например, приведенный выше код выполняется, когда приложение находится в рабочем или тестовом режиме. Дополнительные сведения см. в статье Использование нескольких сред в ASP.NET Core. Следующий код включает различное ПО промежуточного слоя: app.UseHttpsRedirection();: перенаправляет все запросы HTTP на HTTPS. app.UseStaticFiles();: обеспечивает обслуживание таких статических файлов, как HTML, CSS, изображения и JavaScript. Подробные сведения см. в статье Статические файлы в ASP.NET Core. app.UseRouting();: добавляет соответствие маршрута в конвейер ПО промежуточного слоя. Дополнительные сведения см. в статье Маршрутизация в ASP.NET Core. app.MapRazorPages();: настраивает маршрутизацию конечных точек для Razor Pages. app.UseAuthorization();: разрешает пользователю доступ к защищенным ресурсам. Это приложение не использует авторизацию, поэтому эту строку можно удалить. app.Run();: запускает приложение. Устранение неполадок с завершенным&nbsp;примером Если вы столкнулись с проблемой, которую не можете решить, сравните свой код с кодом готового проекта. Просмотрите или скачайте завершенный проект (порядок загрузки). Следующие шаги Далее: добавление модели В этом первом руководстве серии приводятся основные сведения о веб-приложении Razor Pages в ASP.NET Core. Дополнительные сведения, предназначенные для разработчиков, которые знакомы с контроллерами и представлениями, см. в статье Введение в Razor Pages. Если вы новичок в разработке на ASP.NET&nbsp;Core и не знаете, какое решение для пользовательского веб-интерфейса подойдет вам, см. статью Выбор пользовательского интерфейса ASP.NET Core. Пройдя всю серию, вы получите приложение, которое управляет базой данных фильмов. Изучив это руководство, вы: Создание веб-приложения Razor Pages. Выполнить приложение. Анализ файлов проекта. Пройдя это руководство, вы получите рабочее веб-приложение Razor Pages, улучшение которого описано в последующих руководствах. Необходимые компоненты Visual Studio Visual Studio Code Visual Studio для Mac Visual Studio&nbsp;2019&nbsp;16.8 или более поздней версии с рабочей нагрузкой ASP.NET и разработка веб-приложений Пакет SDK для .NET&nbsp;5.0 Visual Studio Code C# для Visual Studio Code (последняя версия) Пакет SDK для .NET&nbsp;5.0 Для функций разработки ASP.NET Core, таких как создание проекта, в инструкциях Visual Studio Code используется .NET&nbsp;CLI. Эти инструкции можно выполнять на macOS, Linux или Windows и в любом редакторе кода. При использовании редактора, отличного от Visual Studio Code, может потребоваться внести незначительные изменения. Visual Studio для Mac Пакет SDK для .NET&nbsp;5.0 Создание веб-приложения Razor Pages Visual Studio Visual Studio Code Visual Studio для Mac Откройте Visual Studio и выберите Создать проект. Дополнительные сведения см. в статье Создание проекта в Visual Studio. В диалоговом окне Создать проект выберите Веб-приложение ASP.NET Core и нажмите Далее. В диалоговом окне Настроить новый проект введите RazorPagesMovie в поле Имя проекта. Важно присвоить проекту RazorPagesMovie, включая сопоставление прописной буквы, поэтому пространства имен будут соответствовать при копировании и вставке примера кода. Нажмите кнопку создания. В диалоговом окне Создайте веб-приложение ASP.NET Core сделайте следующее: В раскрывающихся списках выберите .NET Core и ASP.NET Core 5.0. Веб-приложение. Создание. Создается следующий начальный проект: В этом руководстве предполагается, что вы умеете работать с VS&nbsp;Code. Дополнительные сведения см. в статье Начало работы с VS&nbsp;Code. Выберите новый терминал в меню терминала , чтобы открыть интегрированный терминал. Перейдите в каталог cd, в котором будет находиться проект. Выполните следующие команды: dotnet new webapp -o RazorPagesMovie code -r RazorPagesMovie Команда dotnet new создает новый проект Razor Pages в папке RazorPagesMovie. Команда code открывает папку проекта RazorPagesMovie в текущем экземпляре Visual Studio Code. Visual Studio Code может отобразить диалоговое окно с запросом: доверяете авторам файлов в этой папке? Если вы доверяете всем файлам в родительской папке, выберите "Доверять авторам всех файлов" в родительской папке. Выберите "Да", я доверяю авторам , так как папка проекта содержит файлы, созданные .NET. Когда Visual Studio Code запрашивает добавление ресурсов для сборки и отладки проекта, нажмите кнопку "Да". Если Visual Studio Code не предлагает добавлять ресурсы сборки и отладки, выберите представление&gt;палитры команд и введите ".NET" в поле поиска. В списке команд выберите .NET: Generate Assets for Build and Debug команду. Visual Studio Code добавляет папку .vscode с созданными и launch.json файламиtasks.json. Выберите Файл&nbsp;&gt;Новое решение. В версии Visual Studio для Mac, предшествующей 8.6, последовательно выберите .NET Core&gt;Приложение&gt;Веб-приложение&gt;Далее. В версии&nbsp;8.6 или более поздней последовательно выберите Интернет и консоль&gt;Приложение&gt;Веб-приложение&gt;Далее. В диалоговом окне Configure the new Web Application (Настройка нового веб-приложения): Убедитесь, что для параметра Аутентификация задано значение Без аутентификации. Если отобразится запрос на выбор целевой платформы, выберите последнюю версию .NET&nbsp;5.x. Выберите Далее. Назовите проект RazorPagesMovie и нажмите кнопку "Создать". Выполнить приложение Visual Studio Visual Studio Code Visual Studio для Mac Нажмите клавиши CTRL+F5, чтобы выполнить запуск без отладчика. Visual Studio отображает следующее диалоговое окно, если проект еще не настроен для использования&nbsp;SSL: Выберите Да, чтобы сделать SSL-сертификат IIS Express доверенным. Отобразится следующее диалоговое окно. Выберите Да, если согласны доверять сертификату разработки. Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. Visual Studio запускает IIS Express, а затем приложение. В адресной строке указывается localhost:port#, а не что-либо типа example.com. Это связано с тем, что localhost&nbsp;— стандартное имя узла для локального компьютера. Localhost обслуживает только веб-запросы с локального компьютера. Когда Visual Studio создает веб-проект, для веб-сервера используется случайный порт. Настройте доверие сертификату разработки HTTPS с помощью следующей команды: dotnet dev-certs https --trust Для предыдущей команды требуется пакет SDK для .NET 9 или более поздней версии в Linux. Для Linux в пакете SDK для .NET 8.0.401 и более ранних версий см. документацию по дистрибутиву Linux для доверия к сертификату. Приведенная выше команда отображает следующее диалоговое окно, если сертификат не был ранее&nbsp;доверенным: Выберите Да, если согласны доверять сертификату разработки. Дополнительные сведения см. в разделе "Доверие" в разделе сертификатов разработки ASP.NET Core HTTPS статьи "Принудительное применение SSL ". Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. Нажмите клавиши CTRL-F5, чтобы выполнить запуск без отладчика. Visual Studio Code запускает Kestrel, открывает браузер и переходит к http://localhost:5001. В адресной строке указывается localhost:port#, а не что-либо типа example.com. Это связано с тем, что localhost&nbsp;— стандартное имя узла для локального компьютера. Localhost обслуживает только веб-запросы с локального компьютера. Выберите Выполнить&gt;Запуск без отладки, чтобы запустить приложение. Visual Studio для Mac: Запускает сервер Kestrel. запускает браузер; перенаправляет по адресу http://localhost:port, где port&nbsp;— это номер порта, выбранный случайным образом. В Visual Studio для Mac отображается следующее всплывающее окно: Выберите Да, если вы доверяете сертификату разработки. Отобразится следующее диалоговое окно. Введите пароль и нажмите кнопку ОК. Выберите Да, если согласны доверять сертификату разработки. Дополнительные сведения см. в разделе Настройка доверия к сертификату разработки HTTPS ASP.NET Core. Чтобы выполнить запуск без отладчика, нажмите клавиши OPT+CMD+RETURN в Visual Studio. Вы также можете в строке меню выбрать Запуск&nbsp;&gt; Запуск без отладки. Visual Studio запускает Kestrel, открывает браузер и переходит к http://localhost:5001. Анализ файлов проекта Ниже приведен обзор основных папок и файлов проекта, с которыми вы будете работать в последующих учебниках. Папка Pages Содержит страницы Razor и вспомогательные файлы. Каждая страница Razor&nbsp;— это пара файлов. Файл .cshtml с разметкой HTML и кодом C# использует синтаксис Razor. .cshtml.cs Файл с кодом C#, который обрабатывает события страницы. Имена вспомогательных файлов начинаются с символа подчеркивания. Например, _Layout.cshtml файл настраивает элементы пользовательского интерфейса, общие для всех страниц. Этот файл настраивает меню навигации в верхней части страницы и уведомление об авторских правах в нижней части страницы. Подробные сведения см. в статье Макет в ASP.NET Core. Папка wwwroot Содержит статические ресурсы, такие как HTML-файлы, файлы JavaScript и CSS-файлы. Подробные сведения см. в статье Статические файлы в ASP.NET Core. appsettings.json Содержит данные конфигурации, например строки подключения. Дополнительные сведения см. в разделе Конфигурация в ASP.NET Core. Program.cs Содержит точку входа для приложения. Дополнительные сведения см. в статье Универсальный узел .NET в ASP.NET&nbsp;Core. Startup.cs содержит код, задающий поведение приложения. Подробные сведения см. в статье Запуск приложения в ASP.NET Core. Устранение неполадок с завершенным&nbsp;примером Если вы столкнулись с проблемой, которую не можете решить, сравните свой код с кодом готового проекта. Просмотрите или скачайте завершенный проект (порядок загрузки). Следующие шаги Далее: добавление модели В этом первом руководстве серии приводятся основные сведения о веб-приложении Razor Pages в ASP.NET Core. Дополнительные сведения, предназначенные для разработчиков, которые знакомы с контроллерами и представлениями, см. в статье Введение в Razor Pages. Пройдя всю серию, вы получите приложение, которое управляет базой данных фильмов. Просмотреть или скачать пример кода (описание скачивания). Изучив это руководство, вы: Создание веб-приложения Razor Pages. Выполнить приложение. Анализ файлов проекта. Пройдя это руководство, вы получите рабочее веб-приложение Razor Pages, сборка которого описана в последующих руководствах. Необходимые компоненты Visual Studio Visual Studio Code Visual Studio для Mac Visual Studio&nbsp;2019&nbsp;16.4 или более поздней версии с рабочей нагрузкой ASP.NET и разработка веб-приложений Пакет SDK для .NET Core&nbsp;3.1 Visual Studio Code C# для Visual Studio Code (последняя версия) Пакет SDK для .NET Core&nbsp;3.1 Для функций разработки ASP.NET Core, таких как создание проекта, в инструкциях Visual Studio Code используется .NET&nbsp;CLI. Эти инструкции можно выполнять на любой платформе (macOS, Linux или Windows) и в любом редакторе кода. При использовании редактора, отличного от Visual Studio Code, может потребоваться внести незначительные изменения. Дополнительные сведения об установке Visual Studio Code в macOS см. в статье Visual Studio Code в macOS. Visual Studio для Mac&nbsp;8.4 или более поздней версии Пакет SDK для .NET Core&nbsp;3.1 Создание веб-приложения Razor Pages Visual Studio Visual Studio Code Visual Studio для Mac В меню Файл Visual Studio откройте меню Создать&gt;Проект. Создайте веб-приложение ASP.NET Core и нажмите кнопку Далее. Назовите проект RazorPagesMovie. Очень важно, чтобы проект имел имя RazorPagesMovie, так как пространства имен при копировании и вставке кода должны совпасть. Выберите в раскрывающемся списке пункт ASP.NET Core&nbsp;3.1, затем&nbsp;— Веб-приложение и нажмите кнопку Создать. Создается следующий начальный проект: Откройте Интегрированный терминал. Перейдите в каталог cd, в котором находится проект. Выполните следующие команды: dotnet new webapp -o RazorPagesMovie code -r RazorPagesMovie Команда dotnet new создает новый проект Razor Pages в папке RazorPagesMovie. Команда code открывает папку RazorPagesMovie в текущем экземпляре Visual Studio Code. После того как значок пламени OmniSharp в строке состояния становится зеленым, диалоговое окно запрашивает отсутствие необходимых ресурсов для сборки и отладки из RazorPagesMovie. Добавьте их? Нажмите кнопку "Да". Каталог VSCODE , содержащий launch.json и tasks.json файлы, добавляется в корневой каталог проекта. Если Visual Studio Code не предлагает возможность автоматического добавления ресурсов, см. руководство по операционной системе Linux в статье Инструменты для ASP.NET Core Blazor. Выберите Файл&nbsp;&gt;Новое решение. В версии Visual Studio для Mac, предшествующей 8.6, последовательно выберите .NET Core&gt;Приложение&gt;Веб-приложение&gt;Далее. В версии&nbsp;8.6 или более поздней последовательно выберите Интернет и консоль&gt;Приложение&gt;Веб-приложение&gt;Далее. В диалоговом окне Configure the new Web Application (Настройка нового веб-приложения): Убедитесь, что для параметра Аутентификация задано значение Без аутентификации. Если отобразится запрос на выбор целевой платформы, выберите последнюю версию 3.x. Выберите Далее. Присвойте проекту имя RazorPagesMovie и нажмите кнопку Создать. Выполнить приложение Visual Studio Visual Studio Code Visual Studio для Mac Нажмите клавиши CTRL+F5, чтобы выполнить запуск без отладчика. Visual Studio отображает следующее диалоговое окно, если проект еще не настроен для использования&nbsp;SSL: Выберите Да, чтобы сделать SSL-сертификат IIS Express доверенным. Отобразится следующее диалоговое окно. Выберите Да, если согласны доверять сертификату разработки. Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. Visual Studio запускает IIS Express, а затем приложение. В адресной строке указывается localhost:port#, а не что-либо типа example.com. Это связано с тем, что localhost&nbsp;— стандартное имя узла для локального компьютера. Localhost обслуживает только веб-запросы с локального компьютера. Когда Visual Studio создает веб-проект, для веб-сервера используется случайный порт. Настройте доверие сертификату разработки HTTPS с помощью следующей команды: dotnet dev-certs https --trust Для предыдущей команды требуется пакет SDK для .NET 9 или более поздней версии в Linux. Для Linux в пакете SDK для .NET 8.0.401 и более ранних версий см. документацию по дистрибутиву Linux для доверия к сертификату. Приведенная выше команда отображает следующее диалоговое окно, если сертификат не был ранее&nbsp;доверенным: Выберите Да, если согласны доверять сертификату разработки. Дополнительные сведения см. в разделе "Доверие" в разделе сертификатов разработки ASP.NET Core HTTPS статьи "Принудительное применение SSL ". Сведения о доверии к браузеру Firefox см. в разделе Ошибка сертификата браузера Firefox SEC_ERROR_INADEQUATE_KEY_USAGE. Нажмите клавиши CTRL-F5, чтобы выполнить запуск без отладчика. Visual Studio Code запускает Kestrel, открывает браузер и переходит к http://localhost:5001. В адресной строке указывается localhost:port#, а не что-либо типа example.com. Это связано с тем, что localhost&nbsp;— стандартное имя узла для локального компьютера. Localhost обслуживает только веб-запросы с локального компьютера. Выберите Выполнить&gt;Запуск без отладки, чтобы запустить приложение. Visual Studio для Mac: Запускает сервер Kestrel. запускает браузер; перенаправляет по адресу http://localhost:port, где port&nbsp;— это номер порта, выбранный случайным образом. В Visual Studio для Mac отображается следующее всплывающее окно: Выберите Да, если вы доверяете сертификату разработки. Отобразится следующее диалоговое окно. Введите пароль и нажмите кнопку ОК. Выберите Да, если согласны доверять сертификату разработки. Дополнительные сведения см. в разделе Настройка доверия к сертификату разработки HTTPS ASP.NET Core. Чтобы выполнить запуск без отладчика, нажмите клавиши OPT+CMD+RETURN в Visual Studio. Вы также можете в строке меню выбрать Запуск&nbsp;&gt; Запуск без отладки. Visual Studio запускает Kestrel, открывает браузер и переходит к http://localhost:5001. Анализ файлов проекта Ниже приведен обзор основных папок и файлов проекта, с которыми вы будете работать в последующих учебниках. Папка Pages Содержит страницы Razor и вспомогательные файлы. Каждая страница Razor&nbsp;— это пара файлов. Файл .cshtml с разметкой HTML и кодом C# использует синтаксис Razor. .cshtml.cs Файл с кодом C#, который обрабатывает события страницы. Имена вспомогательных файлов начинаются с символа подчеркивания. Например, _Layout.cshtml файл настраивает элементы пользовательского интерфейса, общие для всех страниц. Этот файл настраивает меню навигации в верхней части страницы и уведомление об авторских правах в нижней части страницы. Подробные сведения см. в статье Макет в ASP.NET Core. Папка wwwroot Содержит статические файлы, такие как HTML-файлы, файлы JavaScript и CSS-файлы. Подробные сведения см. в статье Статические файлы в ASP.NET Core. appSettings.json Содержит данные конфигурации, например строки подключения. Дополнительные сведения см. в разделе Конфигурация в ASP.NET Core. Program.cs Содержит точку входа для программы. Дополнительные сведения см. в статье Универсальный узел .NET в ASP.NET&nbsp;Core. Startup.cs содержит код, задающий поведение приложения. Подробные сведения см. в статье Запуск приложения в ASP.NET Core. Следующие шаги Далее: добавление модели Совместная работа с нами на GitHub Источник этого содержимого можно найти на GitHub, где также можно создавать и просматривать проблемы и запросы на вытягивание. Дополнительные сведения см. в нашем руководстве для участников. ASP.NET Core Открыть проблему с документацией Отзыв о продукте Дополнительные ресурсы Дополнительные ресурсы