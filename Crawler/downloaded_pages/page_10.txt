Microsoft.AspNetCore.OData 9.2.1 Prefix Reserved .NET 8.0 This package targets .NET 8.0. The package is compatible with this framework or higher. .NET CLI Package Manager PackageReference Paket CLI Script &amp; Interactive Cake dotnet add package Microsoft.AspNetCore.OData --version 9.2.1 Copy NuGet\Install-Package Microsoft.AspNetCore.OData -Version 9.2.1 Copy This command is intended to be used within the Package Manager Console in Visual Studio, as it uses the NuGet module's version of Install-Package. &lt;PackageReference Include=&quot;Microsoft.AspNetCore.OData&quot; Version=&quot;9.2.1&quot; /&gt; Copy For projects that support PackageReference, copy this XML node into the project file to reference the package. paket add Microsoft.AspNetCore.OData --version 9.2.1 Copy The NuGet Team does not provide support for this client. Please contact its maintainers for support. #r &quot;nuget: Microsoft.AspNetCore.OData, 9.2.1&quot; Copy #r directive can be used in F# Interactive and Polyglot Notebooks. Copy this into the interactive tool or source code of the script to reference the package. // Install Microsoft.AspNetCore.OData as a Cake Addin #addin nuget:?package=Microsoft.AspNetCore.OData&amp;version=9.2.1 // Install Microsoft.AspNetCore.OData as a Cake Tool #tool nuget:?package=Microsoft.AspNetCore.OData&amp;version=9.2.1 Copy The NuGet Team does not provide support for this client. Please contact its maintainers for support. README Frameworks Dependencies Used By Versions ASP.NET Core OData Component Build Status ASP.NET Core OData Rolling ASP.NET Core OData Nightly .NET Foundation Release 1. Basic Usage Microsoft.AspNetCore.OData Package Installation Using .NET CLI: dotnet add package Microsoft.AspNetCore.OData Using Package Manager: Install-Package Microsoft.AspNetCore.OData Getting Started Creating an OData Service Here's a simple example of how to create an OData service using Microsoft.AspNetCore.OData: I. Create an ASP.NET Core Application: Open Visual Studio and create a new ASP.NET Core Web API project. II. Add the Microsoft.AspNetCore.OData Package: Install the package using the instructions above. III. Define Your Models: Create your data models. For example: namespace MyODataApp.Models { public class Product { public int Id { get; set; } public string Name { get; set; } public decimal Price { get; set; } } } IV. Add an OData Controller: Create a controller to handle OData requests: using Microsoft.AspNetCore.Mvc; using Microsoft.AspNetCore.OData.Routing.Controllers; using MyODataApp.Models; using System.Collections.Generic; using System.Linq; namespace MyODataApp.Controllers { public class ProductsController : ODataController { private static List&lt;Product&gt; products = new List&lt;Product&gt; { new Product { Id = 1, Name = "Product 1", Price = 10.0M }, new Product { Id = 2, Name = "Product 2", Price = 20.0M } }; [EnableQuery] public IActionResult Get() { return Ok(products); } [EnableQuery] public IActionResult Get(int key) { var product = products.FirstOrDefault(p =&gt; p.Id == key); if (product == null) { return NotFound(); } return Ok(product); } } } V. Configure OData in Startup.cs: Configure OData routes and services: If you work with Program.cs, update as below. Refer to the Getting Started Guide. // using statements var builder = WebApplication.CreateBuilder(args); var modelBuilder = new ODataConventionModelBuilder(); modelBuilder.EntityType&lt;Order&gt;(); modelBuilder.EntitySet&lt;Customer&gt;("Customers"); builder.Services.AddControllers().AddOData( options =&gt; options.Select().Filter().OrderBy().Expand().Count().SetMaxTop(null).AddRouteComponents( "odata", GetEdmModel())); var app = builder.Build(); // Send "~/$odata" to debug routing if enable the following middleware // app.UseODataRouteDebug(); app.UseRouting(); app.MapControllers(); app.Run(); static IEdmModel GetEdmModel() { var builder = new ODataConventionModelBuilder(); builder.EntitySet&lt;Product&gt;("Products"); return builder.GetEdmModel(); } using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.DependencyInjection; using Microsoft.OData.Edm; using Microsoft.OData.ModelBuilder; namespace MyODataApp { public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddControllers(); services.AddOData(opt =&gt; opt.AddModel("odata", GetEdmModel()).Filter().Select().Expand().OrderBy().Count().SetMaxTop(100)); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // Send "~/$odata" to debug routing if enable the following middleware // app.UseODataRouteDebug(); app.UseRouting(); app.UseEndpoints(endpoints =&gt; { endpoints.MapControllers(); endpoints.Select().Expand().Filter().OrderBy().Count().MaxTop(100); endpoints.MapODataRoute("odata", "odata", GetEdmModel()); }); } private static IEdmModel GetEdmModel() { var builder = new ODataConventionModelBuilder(); builder.EntitySet&lt;Product&gt;("Products"); return builder.GetEdmModel(); } } } VI. Run Your Application: Start your application and navigate to /odata/Products to see your OData service in action. That's it. 2. Github Repository This is the official ASP.NET Core OData repository. ASP.NET Core OData is a server side library built upon ODataLib and ASP.NET Core. Blogs: $compute and $search in ASP.NET Core OData 8 API versioning extension with ASP.NET Core OData 8 Build formatter extensions in ASP.NET Core OData 8 and hooks in ODataConnectedService Attribute Routing in ASP.NET Core OData 8.0 RC Routing in ASP.NET Core OData 8.0 Preview ASP.NET Core OData 8.0 Preview for .NET 5 Documentation: For comprehensive documentation, please refer to the following links: ASP.NET Core OData Overview Getting Started Fundamentals Overview Tutorials OData Dev Blogs OData.org Example: ODataRoutingSample: ASP.NET Core OData sample project in this repo. ~/$odata gives a static routing table page of the service ~/swagger gives a swagger/openapi page Append ~/$openapi to each route gives a raw openapi OData page, for example, ~/v1/$openapi Please go to sample folder see more samples. Solution: AspNetCoreOData.sln: Includes Microsoft.AspNetCore.OData project, Unit Test, E2E Test &amp; Samples AspNetCoreOData.NewtonsoftJson.sln Includes Microsoft.AspNetCore.OData.NewtonsoftJson project, Unit Test, E2E Test &amp; Samples 3. Building, Testing, Debugging and Release 3.1 Building and Testing in Visual Studio Visual Studio 2022 is required to build the source project in order to support the DateOnly and TimeOnly types, which were introduced in .NET 6. 3.2 One-click build and test script in command line Coming soon. 3.3 Debug The symbol package is uploaded to nuget symbol server. It supports source link debug. Remember to check Enable Source Link support if you debug using Visual Studio. 3.4 Nightly Builds The nightly build process will upload NuGet packages for ASP.NET Core OData to: https://www.myget.org/gallery/webapinetcore To connect to webapinightly feed, use this feed URL: https://www.myget.org/F/webapinetcore/api/v3/index.json (Your NuGet V3 feed URL (Visual Studio 2015+) https://www.myget.org/F/webapinetcore/api/v2 Your NuGet V2 feed URL (Visual Studio 2012+) 4. Documentation ODataRoutingSample: ASP.NET Core OData sample project in this repo. ASP.NET OData 8.0 Preview for .NET 5: A blog introducing the project. Our docs folder: Our current documentation 5. Community 5.1 Contribution Any contributions, feature requests, bugs and issues are welcome. 5.2 Reporting Security Issues Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) secure@microsoft.com. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the Security TechCenter. You can also find these instructions in this repo's SECURITY.md. 5.3 Support Issues: Report issues on Github issues. Questions: Ask questions on Stack Overflow. Feedback: Please send mails to odatafeedback@microsoft.com. Team blog: Please visit https://devblogs.microsoft.com/odata/ and http://www.odata.org/blog/. Code of Conduct This project has adopted the .NET Foundation Contributor Covenant Code of Conduct. For more information see the Code of Conduct FAQ. .NET Foundation This project is supported by the .NET Foundation. AspNetCoreOData is a Copyright of © .NET Foundation and other contributors. It is licensed under MIT License Product Versions Compatible and additional computed target framework versions. .NET net8.0 net8.0 is compatible.&nbsp; net8.0-android net8.0-android was computed.&nbsp; net8.0-browser net8.0-browser was computed.&nbsp; net8.0-ios net8.0-ios was computed.&nbsp; net8.0-maccatalyst net8.0-maccatalyst was computed.&nbsp; net8.0-macos net8.0-macos was computed.&nbsp; net8.0-tvos net8.0-tvos was computed.&nbsp; net8.0-windows net8.0-windows was computed.&nbsp; net9.0 net9.0 was computed.&nbsp; net9.0-android net9.0-android was computed.&nbsp; net9.0-browser net9.0-browser was computed.&nbsp; net9.0-ios net9.0-ios was computed.&nbsp; net9.0-maccatalyst net9.0-maccatalyst was computed.&nbsp; net9.0-macos net9.0-macos was computed.&nbsp; net9.0-tvos net9.0-tvos was computed.&nbsp; net9.0-windows net9.0-windows was computed.&nbsp; Compatible target framework(s) Included target framework(s) (in package) Learn more about Target Frameworks and .NET Standard. net8.0 Microsoft.OData.Core (&gt;= 8.2.3 &amp;&amp; &lt; 9.0.0) Microsoft.OData.Edm (&gt;= 8.2.3 &amp;&amp; &lt; 9.0.0) Microsoft.OData.ModelBuilder (&gt;= 2.0.0 &amp;&amp; &lt; 3.0.0) Microsoft.Spatial (&gt;= 8.2.3 &amp;&amp; &lt; 9.0.0) NuGet packages (199) Showing the top 5 NuGet packages that depend on Microsoft.AspNetCore.OData: Package Downloads Microsoft.AspNetCore.OData.Versioning A service API versioning library for Microsoft ASP.NET Core and OData v4.0. 3.1M AutoMapper.AspNetCore.OData.EFCore Creates LINQ expressions from ODataQueryOptions and executes the query. 2.7M Microsoft.AspNetCore.OData.NewtonsoftJson This package contains customized Newtonsoft.Json serializer converters to support OData serialization. 1.9M FenixAlliance.ACL.Dependencies Application Component for the Alliance Business Suite. 933.0K Asp.Versioning.OData A service API versioning library for Microsoft ASP.NET Core with OData v4.0. 870.3K GitHub repositories (36) Showing the top 5 popular GitHub repositories that depend on Microsoft.AspNetCore.OData: Repository Stars dotnet/efcore EF Core is a modern object-database mapper for .NET. It supports LINQ queries, change tracking, updates, and schema migrations. 14.0K aspnetboilerplate/aspnetboilerplate ASP.NET Boilerplate - Web Application Framework 11.9K MapsterMapper/Mapster A fast, fun and stimulating object to object Mapper 4.5K radzenhq/radzen-blazor Radzen Blazor is a set of 90+ free native Blazor UI components packed with DataGrid, Scheduler, Charts and robust theming including Material design and FluentUI. 3.8K dotnet/aspnet-api-versioning Provides a set of libraries which add service API versioning to ASP.NET Web API, OData with ASP.NET Web API, and ASP.NET Core. 3.1K Version Downloads Last updated 9.2.1 25,418 3/12/2025 9.2.0 131,961 2/6/2025 9.1.3 95,543 1/15/2025 9.1.1 421,421 11/19/2024 9.1.0 85,274 11/13/2024 9.0.0 1,301,272 8/20/2024 9.0.0-rc.1 3,234 7/15/2024 9.0.0-preview.2 1,666 6/5/2024 8.2.7 250,726 11/19/2024 8.2.5 3,674,836 3/1/2024 8.2.4 2,286,984 1/17/2024 8.2.3 2,263,417 9/6/2023 8.2.0 2,298,541 5/18/2023 8.1.2 653,443 5/2/2023 8.1.1 460,552 4/4/2023 8.1.1 is deprecated. 8.1.0 247,532 3/27/2023 8.1.0 is deprecated. 8.0.12 3,059,981 12/9/2022 8.0.11 2,051,634 8/16/2022 8.0.10 2,046,762 4/27/2022 8.0.9 166,311 4/14/2022 8.0.8 978,064 2/19/2022 8.0.7 296,347 2/1/2022 8.0.6 1,053,702 1/11/2022 8.0.5 18,376 1/7/2022 8.0.4 1,193,537 11/9/2021 8.0.3 380,864 10/1/2021 8.0.2 703,774 9/1/2021 8.0.1 402,833 7/7/2021 8.0.0 98,233 7/3/2021 8.0.0-rc3 24,295 6/7/2021 8.0.0-rc2 49,112 5/1/2021 8.0.0-rc 60,364 3/30/2021 8.0.0-preview3 41,412 12/17/2020 8.0.0-preview2 5,427 11/4/2020 8.0.0-preview 4,712 9/29/2020 8.0.0-beta 7,689 1/26/2021 7.7.8 4,750 1/31/2025 7.7.7 11,244 11/11/2024 7.7.6 42,122 7/12/2024 7.7.5 30,218 5/7/2024 7.7.4 164,401 1/29/2024 7.7.3 56,163 11/30/2023 7.7.2 137,840 10/29/2023 7.7.1 68,639 7/25/2023 7.7.0 335,289 5/25/2023 7.6.5 52,926 3/16/2023 7.6.4 65,532 2/16/2023 7.6.3 112,744 12/28/2022 7.6.1 160,842 10/24/2022 7.6.1-beta 2,031 1/24/2022 7.6.0 19,607 10/20/2022 7.6.0-beta 1,121 10/31/2021 7.5.18 87,334 10/21/2022 7.5.17 373,845 8/19/2022 7.5.15 232,818 6/4/2022 7.5.14 1,219,745 3/9/2022 7.5.13 19,524 2/25/2022 7.5.12 1,132,568 10/8/2021 7.5.11 94,278 10/1/2021 7.5.10 205,664 8/26/2021 7.5.9 36,459 8/13/2021 7.5.8 1,031,654 5/1/2021 7.5.7 470,259 3/26/2021 7.5.6 1,529,060 2/17/2021 7.5.5 407,580 1/20/2021 7.5.4 152,705 12/24/2020 7.5.2 776,563 11/12/2020 7.5.1 561,166 10/22/2020 7.5.0 663,019 9/18/2020 7.4.1 2,213,451 5/22/2020 7.4.0 485,105 4/20/2020 7.4.0-beta2 103,712 4/10/2020 7.4.0-beta 121,058 3/4/2020 7.3.0 2,085,954 12/23/2019 7.3.0-beta 23,101 12/12/2019 7.2.3 163,243 12/11/2019 7.2.2 337,797 10/9/2019 7.2.1 1,009,471 8/5/2019 7.1.0 1,860,151 11/20/2018 7.0.1 756,144 7/18/2018 7.0.0 197,735 6/29/2018 7.0.0-beta4 14,021 5/31/2018 Downloads Full stats → Total 47.6M Current version 25.4K Per day average 15.0K About Last updated 3/12/2025 Project website Source repository MIT license Download package &nbsp;(435.39 KB) Download symbols &nbsp;(149.31 KB) Open in NuGet Package Explorer Open in NuGet Trends Report package Owners Contact owners → Microsoft OData dotnetfoundation Microsoft AspNetCore WebApi OData &#169; .NET Foundation and Contributors. All rights reserved.