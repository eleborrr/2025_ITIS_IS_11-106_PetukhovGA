Пропустить и перейти к основному содержимомуПереход к навигации на странице Этот браузер больше не поддерживается. Выполните обновление до Microsoft Edge, чтобы воспользоваться новейшими функциями, обновлениями для системы безопасности и технической поддержкой. Скачать Microsoft Edge Дополнительные сведения об Internet Explorer и Microsoft Edge Оглавление Выйти из режима фокусировки Язык Прочитать на английском Добавить Оглавление Прочитать на английском Добавить Добавить в план Поделиться через Facebook x.com LinkedIn Адрес электронной почты Печать Оглавление Object Класс Ссылка Обратная связь Определение Пространство имен: System Сборка:System.Runtime.dll Сборка:mscorlib.dll Сборка:netstandard.dll Исходный код:Object.cs Исходный код:Object.cs Исходный код:Object.cs Важно! Некоторые сведения относятся к предварительной версии продукта, в которую до выпуска могут быть внесены существенные изменения. Майкрософт не предоставляет никаких гарантий, явных или подразумеваемых, относительно приведенных здесь сведений. Поддерживает все классы в иерархии классов .NET и предоставляет низкоуровневые службы для производных классов. Является исходным базовым классом для всех классов .NET и корнем иерархии типов. public ref class System::Object public class Object [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)] [System.Serializable] public class Object [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)] [System.Serializable] [System.Runtime.InteropServices.ComVisible(true)] public class Object type obj = class [&lt;System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)&gt;] [&lt;System.Serializable&gt;] type obj = class [&lt;System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)&gt;] [&lt;System.Serializable&gt;] [&lt;System.Runtime.InteropServices.ComVisible(true)&gt;] type obj = class Public Class Object Атрибуты ClassInterfaceAttribute SerializableAttribute ComVisibleAttribute Примеры В следующем примере определяется тип Point, производный от класса Object, и переопределяются многие виртуальные методы класса Object. Кроме того, в примере показано, как вызывать многие из статических методов и методов экземпляра класса Object. using System; // The Point class is derived from System.Object. class Point { public int x, y; public Point(int x, int y) { this.x = x; this.y = y; } public override bool Equals(object obj) { // If this and obj do not refer to the same type, then they are not equal. if (obj.GetType() != this.GetType()) return false; // Return true if x and y fields match. var other = (Point) obj; return (this.x == other.x) &amp;&amp; (this.y == other.y); } // Return the XOR of the x and y fields. public override int GetHashCode() { return x ^ y; } // Return the point's value as a string. public override String ToString() { return $"({x}, {y})"; } // Return a copy of this point object by making a simple field copy. public Point Copy() { return (Point) this.MemberwiseClone(); } } public sealed class App { static void Main() { // Construct a Point object. var p1 = new Point(1,2); // Make another Point object that is a copy of the first. var p2 = p1.Copy(); // Make another variable that references the first Point object. var p3 = p1; // The line below displays false because p1 and p2 refer to two different objects. Console.WriteLine(Object.ReferenceEquals(p1, p2)); // The line below displays true because p1 and p2 refer to two different objects that have the same value. Console.WriteLine(Object.Equals(p1, p2)); // The line below displays true because p1 and p3 refer to one object. Console.WriteLine(Object.ReferenceEquals(p1, p3)); // The line below displays: p1's value is: (1, 2) Console.WriteLine($"p1's value is: {p1.ToString()}"); } } // This code example produces the following output: // // False // True // True // p1's value is: (1, 2) // open System // The Point class is derived from System.Object. type Point(x, y) = member _.X = x member _.Y = y override _.Equals obj = // If this and obj do not refer to the same type, then they are not equal. match obj with | :? Point as other -&gt; // Return true if x and y fields match. x = other.X &amp;&amp; y = other.Y | _ -&gt; false // Return the XOR of the x and y fields. override _.GetHashCode() = x ^^^ y // Return the point's value as a string. override _.ToString() = $"({x}, {y})" // Return a copy of this point object by making a simple field copy. member this.Copy() = this.MemberwiseClone() :?&gt; Point // Construct a Point object. let p1 = Point(1,2) // Make another Point object that is a copy of the first. let p2 = p1.Copy() // Make another variable that references the first Point object. let p3 = p1 // The line below displays false because p1 and p2 refer to two different objects. printfn $"{Object.ReferenceEquals(p1, p2)}" // The line below displays true because p1 and p2 refer to two different objects that have the same value. printfn $"{Object.Equals(p1, p2)}" // The line below displays true because p1 and p3 refer to one object. printfn $"{Object.ReferenceEquals(p1, p3)}" // The line below displays: p1's value is: (1, 2) printfn $"p1's value is: {p1.ToString()}" // This code example produces the following output: // // False // True // True // p1's value is: (1, 2) // using namespace System; // The Point class is derived from System.Object. ref class Point { public: int x; public: int y; public: Point(int x, int y) { this-&gt;x = x; this-&gt;y = y; } public: virtual bool Equals(Object^ obj) override { // If this and obj do not refer to the same type, // then they are not equal. if (obj-&gt;GetType() != this-&gt;GetType()) { return false; } // Return true if x and y fields match. Point^ other = (Point^) obj; return (this-&gt;x == other-&gt;x) &amp;&amp; (this-&gt;y == other-&gt;y); } // Return the XOR of the x and y fields. public: virtual int GetHashCode() override { return x ^ y; } // Return the point's value as a string. public: virtual String^ ToString() override { return String::Format("({0}, {1})", x, y); } // Return a copy of this point object by making a simple // field copy. public: Point^ Copy() { return (Point^) this-&gt;MemberwiseClone(); } }; int main() { // Construct a Point object. Point^ p1 = gcnew Point(1, 2); // Make another Point object that is a copy of the first. Point^ p2 = p1-&gt;Copy(); // Make another variable that references the first // Point object. Point^ p3 = p1; // The line below displays false because p1 and // p2 refer to two different objects. Console::WriteLine( Object::ReferenceEquals(p1, p2)); // The line below displays true because p1 and p2 refer // to two different objects that have the same value. Console::WriteLine(Object::Equals(p1, p2)); // The line below displays true because p1 and // p3 refer to one object. Console::WriteLine(Object::ReferenceEquals(p1, p3)); // The line below displays: p1's value is: (1, 2) Console::WriteLine("p1's value is: {0}", p1-&gt;ToString()); } // This code produces the following output. // // False // True // True // p1's value is: (1, 2) ' The Point class is derived from System.Object. Class Point Public x, y As Integer Public Sub New(ByVal x As Integer, ByVal y As Integer) Me.x = x Me.y = y End Sub Public Overrides Function Equals(ByVal obj As Object) As Boolean ' If Me and obj do not refer to the same type, then they are not equal. Dim objType As Type = obj.GetType() Dim meType As Type = Me.GetType() If Not objType.Equals(meType) Then Return False End If ' Return true if x and y fields match. Dim other As Point = CType(obj, Point) Return Me.x = other.x AndAlso Me.y = other.y End Function ' Return the XOR of the x and y fields. Public Overrides Function GetHashCode() As Integer Return (x &lt;&lt; 1) XOR y End Function ' Return the point's value as a string. Public Overrides Function ToString() As String Return $"({x}, {y})" End Function ' Return a copy of this point object by making a simple field copy. Public Function Copy() As Point Return CType(Me.MemberwiseClone(), Point) End Function End Class NotInheritable Public Class App Shared Sub Main() ' Construct a Point object. Dim p1 As New Point(1, 2) ' Make another Point object that is a copy of the first. Dim p2 As Point = p1.Copy() ' Make another variable that references the first Point object. Dim p3 As Point = p1 ' The line below displays false because p1 and p2 refer to two different objects. Console.WriteLine([Object].ReferenceEquals(p1, p2)) ' The line below displays true because p1 and p2 refer to two different objects ' that have the same value. Console.WriteLine([Object].Equals(p1, p2)) ' The line below displays true because p1 and p3 refer to one object. Console.WriteLine([Object].ReferenceEquals(p1, p3)) ' The line below displays: p1's value is: (1, 2) Console.WriteLine($"p1's value is: {p1.ToString()}") End Sub End Class ' This example produces the following output: ' ' False ' True ' True ' p1's value is: (1, 2) ' Комментарии Дополнительные сведения об этом API см. в разделе Дополнительные примечания API для Object. Конструкторы Object() Инициализирует новый экземпляр класса Object. Методы Equals(Object) Определяет, равен ли указанный объект текущему объекту. Equals(Object, Object) Определяет, считаются ли равными указанные экземпляры объектов. Finalize() Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора. GetHashCode() Служит хэш-функцией по умолчанию. GetType() Возвращает объект Type для текущего экземпляра. MemberwiseClone() Создает неполную копию текущего объекта Object. ReferenceEquals(Object, Object) Определяет, совпадают ли указанные экземпляры Object. ToString() Возвращает строку, представляющую текущий объект. Применяется к Потокобезопасность Открытые статические (Shared в Visual Basic) члены этого типа являются потокобезопасными. Для членов экземпляра потокобезопасность не гарантируется. Совместная работа с нами на GitHub Источник этого содержимого можно найти на GitHub, где также можно создавать и просматривать проблемы и запросы на вытягивание. Дополнительные сведения см. в нашем руководстве для участников. .NET Открыть проблему с документацией Отзыв о продукте Дополнительные ресурсы