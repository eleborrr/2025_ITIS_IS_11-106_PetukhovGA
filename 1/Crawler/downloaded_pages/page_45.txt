Skip to content Navigation Menu Toggle navigation Sign in Search or jump to... Search code, repositories, users, issues, pull requests... </form> Search Clear Search syntax tips Provide feedback </form> We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly </form> Name Query To see all available qualifiers, see our documentation. Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert {{ message }} dotnet / aspnetcore Public Notifications You must be signed in to change notification settings Fork 10.3k Star 36.3k Files 3f1acb5/ControllerBase.csCopy path Blame Blame Latest commit HistoryHistory2804 lines (2582 loc) · 140 KB 3f1acb5/ControllerBase.csTopFile metadata and controlsCodeBlame2804 lines (2582 loc) · 140 KBRawicensed to the .NET Foundation under one or more agreements.// The .NET Foundation licenses this file to you under the MIT license. using System.Diagnostics;using System.Diagnostics.CodeAnalysis;using System.Linq.Expressions;using System.Security.Claims;using System.Text;using Microsoft.AspNetCore.Authentication;using Microsoft.AspNetCore.Http;using Microsoft.AspNetCore.Mvc.Core;using Microsoft.AspNetCore.Mvc.Infrastructure;using Microsoft.AspNetCore.Mvc.ModelBinding;using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;using Microsoft.AspNetCore.Mvc.Routing;using Microsoft.AspNetCore.Routing;using Microsoft.Extensions.DependencyInjection;using Microsoft.Net.Http.Headers; namespace Microsoft.AspNetCore.Mvc; /// &lt;summary&gt;/// A base class for an MVC controller without view support./// &lt;/summary&gt;[Controller]public abstract class ControllerBase{ private ControllerContext? _controllerContext; private IModelMetadataProvider? _metadataProvider; private IModelBinderFactory? _modelBinderFactory; private IObjectModelValidator? _objectValidator; private IUrlHelper? _url; private ProblemDetailsFactory? _problemDetailsFactory; /// &lt;summary&gt; /// Gets the &lt;see cref=&quot;Http.HttpContext&quot;/&gt; for the executing action. /// &lt;/summary&gt; public HttpContext HttpContext =&gt; ControllerContext.HttpContext; /// &lt;summary&gt; /// Gets the &lt;see cref=&quot;HttpRequest&quot;/&gt; for the executing action. /// &lt;/summary&gt; public HttpRequest Request =&gt; HttpContext?.Request!; /// &lt;summary&gt; /// Gets the &lt;see cref=&quot;HttpResponse&quot;/&gt; for the executing action. /// &lt;/summary&gt; public HttpResponse Response =&gt; HttpContext?.Response!; /// &lt;summary&gt; /// Gets the &lt;see cref=&quot;AspNetCore.Routing.RouteData&quot;/&gt; for the executing action. /// &lt;/summary&gt; public RouteData RouteData =&gt; ControllerContext.RouteData; /// &lt;summary&gt; /// Gets the &lt;see cref=&quot;ModelStateDictionary&quot;/&gt; that contains the state of the model and of model-binding validation. /// &lt;/summary&gt; public ModelStateDictionary ModelState =&gt; ControllerContext.ModelState; /// &lt;summary&gt; /// Gets or sets the &lt;see cref=&quot;Mvc.ControllerContext&quot;/&gt;. /// &lt;/summary&gt; /// &lt;remarks&gt; /// &lt;see cref=&quot;Controllers.IControllerActivator&quot;/&gt; activates this property while activating controllers. /// If user code directly instantiates a controller, the getter returns an empty /// &lt;see cref=&quot;Mvc.ControllerContext&quot;/&gt;. /// &lt;/remarks&gt; [ControllerContext] public ControllerContext ControllerContext { get { if (_controllerContext == null) { _controllerContext = new ControllerContext(); } return _controllerContext; } set { ArgumentNullException.ThrowIfNull(value); _controllerContext = value; } } /// &lt;summary&gt; /// Gets or sets the &lt;see cref=&quot;IModelMetadataProvider&quot;/&gt;. /// &lt;/summary&gt; [DebuggerBrowsable(DebuggerBrowsableState.Never)] public IModelMetadataProvider MetadataProvider { get { if (_metadataProvider == null) { _metadataProvider = HttpContext?.RequestServices?.GetRequiredService&lt;IModelMetadataProvider&gt;(); } return _metadataProvider!; } set { ArgumentNullException.ThrowIfNull(value); _metadataProvider = value; } } /// &lt;summary&gt; /// Gets or sets the &lt;see cref=&quot;IModelBinderFactory&quot;/&gt;. /// &lt;/summary&gt; [DebuggerBrowsable(DebuggerBrowsableState.Never)] public IModelBinderFactory ModelBinderFactory { get { if (_modelBinderFactory == null) { _modelBinderFactory = HttpContext?.RequestServices?.GetRequiredService&lt;IModelBinderFactory&gt;(); } return _modelBinderFactory!; } set { ArgumentNullException.ThrowIfNull(value); _modelBinderFactory = value; } } /// &lt;summary&gt; /// Gets or sets the &lt;see cref=&quot;IUrlHelper&quot;/&gt;. /// &lt;/summary&gt; [DebuggerBrowsable(DebuggerBrowsableState.Never)] public IUrlHelper Url { get { if (_url == null) { var factory = HttpContext?.RequestServices?.GetRequiredService&lt;IUrlHelperFactory&gt;(); _url = factory?.GetUrlHelper(ControllerContext); } return _url!; } set { ArgumentNullException.ThrowIfNull(value); _url = value; } } /// &lt;summary&gt; /// Gets or sets the &lt;see cref=&quot;IObjectModelValidator&quot;/&gt;. /// &lt;/summary&gt; [DebuggerBrowsable(DebuggerBrowsableState.Never)] public IObjectModelValidator ObjectValidator { get { if (_objectValidator == null) { _objectValidator = HttpContext?.RequestServices?.GetRequiredService&lt;IObjectModelValidator&gt;(); } return _objectValidator!; } set { ArgumentNullException.ThrowIfNull(value); _objectValidator = value; } } /// &lt;summary&gt; /// Gets or sets the &lt;see cref=&quot;ProblemDetailsFactory&quot;/&gt;. /// &lt;/summary&gt; [DebuggerBrowsable(DebuggerBrowsableState.Never)] public ProblemDetailsFactory ProblemDetailsFactory { get { if (_problemDetailsFactory == null) { _problemDetailsFactory = HttpContext?.RequestServices?.GetRequiredService&lt;ProblemDetailsFactory&gt;(); } return _problemDetailsFactory!; } set { ArgumentNullException.ThrowIfNull(value); _problemDetailsFactory = value; } } /// &lt;summary&gt; /// Gets the &lt;see cref=&quot;ClaimsPrincipal&quot;/&gt; for user associated with the executing action. /// &lt;/summary&gt; public ClaimsPrincipal User =&gt; HttpContext?.User!; /// &lt;summary&gt; /// Gets an instance of &lt;see cref=&quot;EmptyResult&quot;/&gt;. /// &lt;/summary&gt; public static EmptyResult Empty { get; } = new(); /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;StatusCodeResult&quot;/&gt; object by specifying a &lt;paramref name=&quot;statusCode&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;statusCode&quot;&gt;The status code to set on the response.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;StatusCodeResult&quot;/&gt; object for the response.&lt;/returns&gt; [NonAction] public virtual StatusCodeResult StatusCode([ActionResultStatusCode] int statusCode) =&gt; new StatusCodeResult(statusCode); /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;ObjectResult&quot;/&gt; object by specifying a &lt;paramref name=&quot;statusCode&quot;/&gt; and &lt;paramref name=&quot;value&quot;/&gt; /// &lt;/summary&gt; /// &lt;param name=&quot;statusCode&quot;&gt;The status code to set on the response.&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;The value to set on the &lt;see cref=&quot;ObjectResult&quot;/&gt;.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;ObjectResult&quot;/&gt; object for the response.&lt;/returns&gt; [NonAction] public virtual ObjectResult StatusCode([ActionResultStatusCode] int statusCode, [ActionResultObjectValue] object? value) { return new ObjectResult(value) { StatusCode = statusCode }; } /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;ContentResult&quot;/&gt; object by specifying a &lt;paramref name=&quot;content&quot;/&gt; string. /// &lt;/summary&gt; /// &lt;param name=&quot;content&quot;&gt;The content to write to the response.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;ContentResult&quot;/&gt; object for the response.&lt;/returns&gt; [NonAction] public virtual ContentResult Content(string content) =&gt; Content(content, (MediaTypeHeaderValue?)null); /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;ContentResult&quot;/&gt; object by specifying a /// &lt;paramref name=&quot;content&quot;/&gt; string and a content type. /// &lt;/summary&gt; /// &lt;param name=&quot;content&quot;&gt;The content to write to the response.&lt;/param&gt; /// &lt;param name=&quot;contentType&quot;&gt;The content type (MIME type).&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;ContentResult&quot;/&gt; object for the response.&lt;/returns&gt; [NonAction] public virtual ContentResult Content(string content, string contentType) =&gt; Content(content, MediaTypeHeaderValue.Parse(contentType)); /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;ContentResult&quot;/&gt; object by specifying a /// &lt;paramref name=&quot;content&quot;/&gt; string, a &lt;paramref name=&quot;contentType&quot;/&gt;, and &lt;paramref name=&quot;contentEncoding&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;content&quot;&gt;The content to write to the response.&lt;/param&gt; /// &lt;param name=&quot;contentType&quot;&gt;The content type (MIME type).&lt;/param&gt; /// &lt;param name=&quot;contentEncoding&quot;&gt;The content encoding.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;ContentResult&quot;/&gt; object for the response.&lt;/returns&gt; /// &lt;remarks&gt; /// If encoding is provided by both the &#039;charset&#039; and the &lt;paramref name=&quot;contentEncoding&quot;/&gt; parameters, then /// the &lt;paramref name=&quot;contentEncoding&quot;/&gt; parameter is chosen as the final encoding. /// &lt;/remarks&gt; [NonAction] public virtual ContentResult Content(string content, string contentType, Encoding contentEncoding) { var mediaTypeHeaderValue = MediaTypeHeaderValue.Parse(contentType); mediaTypeHeaderValue.Encoding = contentEncoding ?? mediaTypeHeaderValue.Encoding; return Content(content, mediaTypeHeaderValue); } /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;ContentResult&quot;/&gt; object by specifying a /// &lt;paramref name=&quot;content&quot;/&gt; string and a &lt;paramref name=&quot;contentType&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;content&quot;&gt;The content to write to the response.&lt;/param&gt; /// &lt;param name=&quot;contentType&quot;&gt;The content type (MIME type).&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;ContentResult&quot;/&gt; object for the response.&lt;/returns&gt; [NonAction] public virtual ContentResult Content(string content, MediaTypeHeaderValue? contentType) { return new ContentResult { Content = content, ContentType = contentType?.ToString() }; } /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;NoContentResult&quot;/&gt; object that produces an empty /// &lt;see cref=&quot;StatusCodes.Status204NoContent&quot;/&gt; response. /// &lt;/summary&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;NoContentResult&quot;/&gt; object for the response.&lt;/returns&gt; [NonAction] public virtual NoContentResult NoContent() =&gt; new NoContentResult(); /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;OkResult&quot;/&gt; object that produces an empty &lt;see cref=&quot;StatusCodes.Status200OK&quot;/&gt; response. /// &lt;/summary&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;OkResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual OkResult Ok() =&gt; new OkResult(); /// &lt;summary&gt; /// Creates an &lt;see cref=&quot;OkObjectResult&quot;/&gt; object that produces an &lt;see cref=&quot;StatusCodes.Status200OK&quot;/&gt; response. /// &lt;/summary&gt; /// &lt;param name=&quot;value&quot;&gt;The content value to format in the entity body.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;OkObjectResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual OkObjectResult Ok([ActionResultObjectValue] object? value) =&gt; new OkObjectResult(value); #region RedirectResult variants /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;RedirectResult&quot;/&gt; object that redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) /// to the specified &lt;paramref name=&quot;url&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;url&quot;&gt;The URL to redirect to.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectResult Redirect([StringSyntax(StringSyntaxAttribute.Uri)] string url) { if (string.IsNullOrEmpty(url)) { throw new ArgumentException(Resources.ArgumentCannotBeNullOrEmpty, nameof(url)); } return new RedirectResult(url); } /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;RedirectResult&quot;/&gt; object with &lt;see cref=&quot;RedirectResult.Permanent&quot;/&gt; set to true /// (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) using the specified &lt;paramref name=&quot;url&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;url&quot;&gt;The URL to redirect to.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectResult RedirectPermanent([StringSyntax(StringSyntaxAttribute.Uri)] string url) { if (string.IsNullOrEmpty(url)) { throw new ArgumentException(Resources.ArgumentCannotBeNullOrEmpty, nameof(url)); } return new RedirectResult(url, permanent: true); } /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;RedirectResult&quot;/&gt; object with &lt;see cref=&quot;RedirectResult.Permanent&quot;/&gt; set to false /// and &lt;see cref=&quot;RedirectResult.PreserveMethod&quot;/&gt; set to true (&lt;see cref=&quot;StatusCodes.Status307TemporaryRedirect&quot;/&gt;) /// using the specified &lt;paramref name=&quot;url&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;url&quot;&gt;The URL to redirect to.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectResult RedirectPreserveMethod([StringSyntax(StringSyntaxAttribute.Uri)] string url) { if (string.IsNullOrEmpty(url)) { throw new ArgumentException(Resources.ArgumentCannotBeNullOrEmpty, nameof(url)); } return new RedirectResult(url: url, permanent: false, preserveMethod: true); } /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;RedirectResult&quot;/&gt; object with &lt;see cref=&quot;RedirectResult.Permanent&quot;/&gt; set to true /// and &lt;see cref=&quot;RedirectResult.PreserveMethod&quot;/&gt; set to true (&lt;see cref=&quot;StatusCodes.Status308PermanentRedirect&quot;/&gt;) /// using the specified &lt;paramref name=&quot;url&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;url&quot;&gt;The URL to redirect to.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectResult RedirectPermanentPreserveMethod([StringSyntax(StringSyntaxAttribute.Uri)] string url) { if (string.IsNullOrEmpty(url)) { throw new ArgumentException(Resources.ArgumentCannotBeNullOrEmpty, nameof(url)); } return new RedirectResult(url: url, permanent: true, preserveMethod: true); } /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;LocalRedirectResult&quot;/&gt; object that redirects /// (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified local &lt;paramref name=&quot;localUrl&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;localUrl&quot;&gt;The local URL to redirect to.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;LocalRedirectResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual LocalRedirectResult LocalRedirect([StringSyntax(StringSyntaxAttribute.Uri, UriKind.Relative)] string localUrl) { if (string.IsNullOrEmpty(localUrl)) { throw new ArgumentException(Resources.ArgumentCannotBeNullOrEmpty, nameof(localUrl)); } return new LocalRedirectResult(localUrl); } /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;LocalRedirectResult&quot;/&gt; object with &lt;see cref=&quot;LocalRedirectResult.Permanent&quot;/&gt; set to /// true (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) using the specified &lt;paramref name=&quot;localUrl&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;localUrl&quot;&gt;The local URL to redirect to.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;LocalRedirectResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual LocalRedirectResult LocalRedirectPermanent([StringSyntax(StringSyntaxAttribute.Uri, UriKind.Relative)] string localUrl) { if (string.IsNullOrEmpty(localUrl)) { throw new ArgumentException(Resources.ArgumentCannotBeNullOrEmpty, nameof(localUrl)); } return new LocalRedirectResult(localUrl, permanent: true); } /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;LocalRedirectResult&quot;/&gt; object with &lt;see cref=&quot;LocalRedirectResult.Permanent&quot;/&gt; set to /// false and &lt;see cref=&quot;LocalRedirectResult.PreserveMethod&quot;/&gt; set to true /// (&lt;see cref=&quot;StatusCodes.Status307TemporaryRedirect&quot;/&gt;) using the specified &lt;paramref name=&quot;localUrl&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;localUrl&quot;&gt;The local URL to redirect to.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;LocalRedirectResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual LocalRedirectResult LocalRedirectPreserveMethod([StringSyntax(StringSyntaxAttribute.Uri, UriKind.Relative)] string localUrl) { if (string.IsNullOrEmpty(localUrl)) { throw new ArgumentException(Resources.ArgumentCannotBeNullOrEmpty, nameof(localUrl)); } return new LocalRedirectResult(localUrl: localUrl, permanent: false, preserveMethod: true); } /// &lt;summary&gt; /// Creates a &lt;see cref=&quot;LocalRedirectResult&quot;/&gt; object with &lt;see cref=&quot;LocalRedirectResult.Permanent&quot;/&gt; set to /// true and &lt;see cref=&quot;LocalRedirectResult.PreserveMethod&quot;/&gt; set to true /// (&lt;see cref=&quot;StatusCodes.Status308PermanentRedirect&quot;/&gt;) using the specified &lt;paramref name=&quot;localUrl&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;localUrl&quot;&gt;The local URL to redirect to.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;LocalRedirectResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual LocalRedirectResult LocalRedirectPermanentPreserveMethod([StringSyntax(StringSyntaxAttribute.Uri, UriKind.Relative)] string localUrl) { if (string.IsNullOrEmpty(localUrl)) { throw new ArgumentException(Resources.ArgumentCannotBeNullOrEmpty, nameof(localUrl)); } return new LocalRedirectResult(localUrl: localUrl, permanent: true, preserveMethod: true); } /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to an action with the same name as current one. /// The &#039;controller&#039; and &#039;action&#039; names are retrieved from the ambient values of the current request. /// &lt;/summary&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; /// &lt;example&gt; /// A POST request to an action named &quot;Product&quot; updates a product and redirects to an action, also named /// &quot;Product&quot;, showing details of the updated product. /// &lt;code&gt; /// [HttpGet] /// public IActionResult Product(int id) /// { /// var product = RetrieveProduct(id); /// return View(product); /// } /// /// [HttpPost] /// public IActionResult Product(int id, Product product) /// { /// UpdateProduct(product); /// return RedirectToAction(); /// } /// &lt;/code&gt; /// &lt;/example&gt; [NonAction] public virtual RedirectToActionResult RedirectToAction() =&gt; RedirectToAction(actionName: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified action using the &lt;paramref name=&quot;actionName&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToAction(string? actionName) =&gt; RedirectToAction(actionName, routeValues: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified action using the /// &lt;paramref name=&quot;actionName&quot;/&gt; and &lt;paramref name=&quot;routeValues&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToAction(string? actionName, object? routeValues) =&gt; RedirectToAction(actionName, controllerName: null, routeValues: routeValues); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified action using the /// &lt;paramref name=&quot;actionName&quot;/&gt; and the &lt;paramref name=&quot;controllerName&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;controllerName&quot;&gt;The name of the controller.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToAction(string? actionName, string? controllerName) =&gt; RedirectToAction(actionName, controllerName, routeValues: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified action using the specified /// &lt;paramref name=&quot;actionName&quot;/&gt;, &lt;paramref name=&quot;controllerName&quot;/&gt;, and &lt;paramref name=&quot;routeValues&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;controllerName&quot;&gt;The name of the controller.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToAction( string? actionName, string? controllerName, object? routeValues) =&gt; RedirectToAction(actionName, controllerName, routeValues, fragment: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified action using the specified /// &lt;paramref name=&quot;actionName&quot;/&gt;, &lt;paramref name=&quot;controllerName&quot;/&gt;, and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;controllerName&quot;&gt;The name of the controller.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToAction( string? actionName, string? controllerName, string? fragment) =&gt; RedirectToAction(actionName, controllerName, routeValues: null, fragment: fragment); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified action using the specified &lt;paramref name=&quot;actionName&quot;/&gt;, /// &lt;paramref name=&quot;controllerName&quot;/&gt;, &lt;paramref name=&quot;routeValues&quot;/&gt;, and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;controllerName&quot;&gt;The name of the controller.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToAction( string? actionName, string? controllerName, object? routeValues, string? fragment) { return new RedirectToActionResult(actionName, controllerName, routeValues, fragment) { UrlHelper = Url, }; } /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status307TemporaryRedirect&quot;/&gt;) to the specified action with /// &lt;see cref=&quot;RedirectToActionResult.Permanent&quot;/&gt; set to false and &lt;see cref=&quot;RedirectToActionResult.PreserveMethod&quot;/&gt; /// set to true, using the specified &lt;paramref name=&quot;actionName&quot;/&gt;, &lt;paramref name=&quot;controllerName&quot;/&gt;, /// &lt;paramref name=&quot;routeValues&quot;/&gt;, and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;controllerName&quot;&gt;The name of the controller.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The route data to use for generating the URL.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToActionPreserveMethod( string? actionName = null, string? controllerName = null, object? routeValues = null, string? fragment = null) { return new RedirectToActionResult( actionName: actionName, controllerName: controllerName, routeValues: routeValues, permanent: false, preserveMethod: true, fragment: fragment) { UrlHelper = Url, }; } /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified action with /// &lt;see cref=&quot;RedirectToActionResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;actionName&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToActionPermanent(string? actionName) =&gt; RedirectToActionPermanent(actionName, routeValues: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified action with /// &lt;see cref=&quot;RedirectToActionResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;actionName&quot;/&gt; /// and &lt;paramref name=&quot;routeValues&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToActionPermanent(string? actionName, object? routeValues) =&gt; RedirectToActionPermanent(actionName, controllerName: null, routeValues: routeValues); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified action with /// &lt;see cref=&quot;RedirectToActionResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;actionName&quot;/&gt; /// and &lt;paramref name=&quot;controllerName&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;controllerName&quot;&gt;The name of the controller.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToActionPermanent(string? actionName, string? controllerName) =&gt; RedirectToActionPermanent(actionName, controllerName, routeValues: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified action with /// &lt;see cref=&quot;RedirectToActionResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;actionName&quot;/&gt;, /// &lt;paramref name=&quot;controllerName&quot;/&gt;, and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;controllerName&quot;&gt;The name of the controller.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToActionPermanent( string? actionName, string? controllerName, string? fragment) =&gt; RedirectToActionPermanent(actionName, controllerName, routeValues: null, fragment: fragment); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified action with /// &lt;see cref=&quot;RedirectToActionResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;actionName&quot;/&gt;, /// &lt;paramref name=&quot;controllerName&quot;/&gt;, and &lt;paramref name=&quot;routeValues&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;controllerName&quot;&gt;The name of the controller.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToActionPermanent( string? actionName, string? controllerName, object? routeValues) =&gt; RedirectToActionPermanent(actionName, controllerName, routeValues, fragment: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified action with /// &lt;see cref=&quot;RedirectToActionResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;actionName&quot;/&gt;, /// &lt;paramref name=&quot;controllerName&quot;/&gt;, &lt;paramref name=&quot;routeValues&quot;/&gt;, and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;controllerName&quot;&gt;The name of the controller.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToActionPermanent( string? actionName, string? controllerName, object? routeValues, string? fragment) { return new RedirectToActionResult( actionName, controllerName, routeValues, permanent: true, fragment: fragment) { UrlHelper = Url, }; } /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status308PermanentRedirect&quot;/&gt;) to the specified action with /// &lt;see cref=&quot;RedirectToActionResult.Permanent&quot;/&gt; set to true and &lt;see cref=&quot;RedirectToActionResult.PreserveMethod&quot;/&gt; /// set to true, using the specified &lt;paramref name=&quot;actionName&quot;/&gt;, &lt;paramref name=&quot;controllerName&quot;/&gt;, /// &lt;paramref name=&quot;routeValues&quot;/&gt;, and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;actionName&quot;&gt;The name of the action.&lt;/param&gt; /// &lt;param name=&quot;controllerName&quot;&gt;The name of the controller.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The route data to use for generating the URL.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToActionResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToActionResult RedirectToActionPermanentPreserveMethod( string? actionName = null, string? controllerName = null, object? routeValues = null, string? fragment = null) { return new RedirectToActionResult( actionName: actionName, controllerName: controllerName, routeValues: routeValues, permanent: true, preserveMethod: true, fragment: fragment) { UrlHelper = Url, }; } /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified route using the specified &lt;paramref name=&quot;routeName&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeName&quot;&gt;The name of the route.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoute(string? routeName) =&gt; RedirectToRoute(routeName, routeValues: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified route using the specified &lt;paramref name=&quot;routeValues&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoute(object? routeValues) =&gt; RedirectToRoute(routeName: null, routeValues: routeValues); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified route using the specified /// &lt;paramref name=&quot;routeName&quot;/&gt; and &lt;paramref name=&quot;routeValues&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeName&quot;&gt;The name of the route.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoute(string? routeName, object? routeValues) =&gt; RedirectToRoute(routeName, routeValues, fragment: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified route using the specified /// &lt;paramref name=&quot;routeName&quot;/&gt; and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeName&quot;&gt;The name of the route.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoute(string? routeName, string? fragment) =&gt; RedirectToRoute(routeName, routeValues: null, fragment: fragment); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified route using the specified /// &lt;paramref name=&quot;routeName&quot;/&gt;, &lt;paramref name=&quot;routeValues&quot;/&gt;, and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeName&quot;&gt;The name of the route.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoute( string? routeName, object? routeValues, string? fragment) { return new RedirectToRouteResult(routeName, routeValues, fragment) { UrlHelper = Url, }; } /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status307TemporaryRedirect&quot;/&gt;) to the specified route with /// &lt;see cref=&quot;RedirectToRouteResult.Permanent&quot;/&gt; set to false and &lt;see cref=&quot;RedirectToRouteResult.PreserveMethod&quot;/&gt; /// set to true, using the specified &lt;paramref name=&quot;routeName&quot;/&gt;, &lt;paramref name=&quot;routeValues&quot;/&gt;, and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeName&quot;&gt;The name of the route.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The route data to use for generating the URL.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoutePreserveMethod( string? routeName = null, object? routeValues = null, string? fragment = null) { return new RedirectToRouteResult( routeName: routeName, routeValues: routeValues, permanent: false, preserveMethod: true, fragment: fragment) { UrlHelper = Url, }; } /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified route with /// &lt;see cref=&quot;RedirectToRouteResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;routeName&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeName&quot;&gt;The name of the route.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoutePermanent(string? routeName) =&gt; RedirectToRoutePermanent(routeName, routeValues: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified route with /// &lt;see cref=&quot;RedirectToRouteResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;routeValues&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoutePermanent(object? routeValues) =&gt; RedirectToRoutePermanent(routeName: null, routeValues: routeValues); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified route with /// &lt;see cref=&quot;RedirectToRouteResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;routeName&quot;/&gt; /// and &lt;paramref name=&quot;routeValues&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeName&quot;&gt;The name of the route.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoutePermanent(string? routeName, object? routeValues) =&gt; RedirectToRoutePermanent(routeName, routeValues, fragment: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified route with /// &lt;see cref=&quot;RedirectToRouteResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;routeName&quot;/&gt; /// and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeName&quot;&gt;The name of the route.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoutePermanent(string? routeName, string? fragment) =&gt; RedirectToRoutePermanent(routeName, routeValues: null, fragment: fragment); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified route with /// &lt;see cref=&quot;RedirectToRouteResult.Permanent&quot;/&gt; set to true using the specified &lt;paramref name=&quot;routeName&quot;/&gt;, /// &lt;paramref name=&quot;routeValues&quot;/&gt;, and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeName&quot;&gt;The name of the route.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoutePermanent( string? routeName, object? routeValues, string? fragment) { return new RedirectToRouteResult(routeName, routeValues, permanent: true, fragment: fragment) { UrlHelper = Url, }; } /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status308PermanentRedirect&quot;/&gt;) to the specified route with /// &lt;see cref=&quot;RedirectToRouteResult.Permanent&quot;/&gt; set to true and &lt;see cref=&quot;RedirectToRouteResult.PreserveMethod&quot;/&gt; /// set to true, using the specified &lt;paramref name=&quot;routeName&quot;/&gt;, &lt;paramref name=&quot;routeValues&quot;/&gt;, and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;routeName&quot;&gt;The name of the route.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The route data to use for generating the URL.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The created &lt;see cref=&quot;RedirectToRouteResult&quot;/&gt; for the response.&lt;/returns&gt; [NonAction] public virtual RedirectToRouteResult RedirectToRoutePermanentPreserveMethod( string? routeName = null, object? routeValues = null, string? fragment = null) { return new RedirectToRouteResult( routeName: routeName, routeValues: routeValues, permanent: true, preserveMethod: true, fragment: fragment) { UrlHelper = Url, }; } /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified &lt;paramref name=&quot;pageName&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;pageName&quot;&gt;The name of the page.&lt;/param&gt; /// &lt;returns&gt;The &lt;see cref=&quot;RedirectToPageResult&quot;/&gt;.&lt;/returns&gt; [NonAction] public virtual RedirectToPageResult RedirectToPage(string pageName) =&gt; RedirectToPage(pageName, routeValues: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified &lt;paramref name=&quot;pageName&quot;/&gt; /// using the specified &lt;paramref name=&quot;routeValues&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;pageName&quot;&gt;The name of the page.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The &lt;see cref=&quot;RedirectToPageResult&quot;/&gt;.&lt;/returns&gt; [NonAction] public virtual RedirectToPageResult RedirectToPage(string pageName, object? routeValues) =&gt; RedirectToPage(pageName, pageHandler: null, routeValues: routeValues, fragment: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified &lt;paramref name=&quot;pageName&quot;/&gt; /// using the specified &lt;paramref name=&quot;pageHandler&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;pageName&quot;&gt;The name of the page.&lt;/param&gt; /// &lt;param name=&quot;pageHandler&quot;&gt;The page handler to redirect to.&lt;/param&gt; /// &lt;returns&gt;The &lt;see cref=&quot;RedirectToPageResult&quot;/&gt;.&lt;/returns&gt; [NonAction] public virtual RedirectToPageResult RedirectToPage(string pageName, string? pageHandler) =&gt; RedirectToPage(pageName, pageHandler, routeValues: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified &lt;paramref name=&quot;pageName&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;pageName&quot;&gt;The name of the page.&lt;/param&gt; /// &lt;param name=&quot;pageHandler&quot;&gt;The page handler to redirect to.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The &lt;see cref=&quot;RedirectToPageResult&quot;/&gt;.&lt;/returns&gt; [NonAction] public virtual RedirectToPageResult RedirectToPage(string pageName, string? pageHandler, object? routeValues) =&gt; RedirectToPage(pageName, pageHandler, routeValues, fragment: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified &lt;paramref name=&quot;pageName&quot;/&gt; /// using the specified &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;pageName&quot;&gt;The name of the page.&lt;/param&gt; /// &lt;param name=&quot;pageHandler&quot;&gt;The page handler to redirect to.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The &lt;see cref=&quot;RedirectToPageResult&quot;/&gt;.&lt;/returns&gt; [NonAction] public virtual RedirectToPageResult RedirectToPage(string pageName, string? pageHandler, string? fragment) =&gt; RedirectToPage(pageName, pageHandler, routeValues: null, fragment: fragment); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status302Found&quot;/&gt;) to the specified &lt;paramref name=&quot;pageName&quot;/&gt; /// using the specified &lt;paramref name=&quot;routeValues&quot;/&gt; and &lt;paramref name=&quot;fragment&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;pageName&quot;&gt;The name of the page.&lt;/param&gt; /// &lt;param name=&quot;pageHandler&quot;&gt;The page handler to redirect to.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;param name=&quot;fragment&quot;&gt;The fragment to add to the URL.&lt;/param&gt; /// &lt;returns&gt;The &lt;see cref=&quot;RedirectToPageResult&quot;/&gt;.&lt;/returns&gt; [NonAction] public virtual RedirectToPageResult RedirectToPage(string pageName, string? pageHandler, object? routeValues, string? fragment) =&gt; new RedirectToPageResult(pageName, pageHandler, routeValues, fragment); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified &lt;paramref name=&quot;pageName&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;pageName&quot;&gt;The name of the page.&lt;/param&gt; /// &lt;returns&gt;The &lt;see cref=&quot;RedirectToPageResult&quot;/&gt; with &lt;see cref=&quot;RedirectToPageResult.Permanent&quot;/&gt; set.&lt;/returns&gt; [NonAction] public virtual RedirectToPageResult RedirectToPagePermanent(string pageName) =&gt; RedirectToPagePermanent(pageName, routeValues: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified &lt;paramref name=&quot;pageName&quot;/&gt; /// using the specified &lt;paramref name=&quot;routeValues&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;pageName&quot;&gt;The name of the page.&lt;/param&gt; /// &lt;param name=&quot;routeValues&quot;&gt;The parameters for a route.&lt;/param&gt; /// &lt;returns&gt;The &lt;see cref=&quot;RedirectToPageResult&quot;/&gt; with &lt;see cref=&quot;RedirectToPageResult.Permanent&quot;/&gt; set.&lt;/returns&gt; [NonAction] public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, object? routeValues) =&gt; RedirectToPagePermanent(pageName, pageHandler: null, routeValues: routeValues, fragment: null); /// &lt;summary&gt; /// Redirects (&lt;see cref=&quot;StatusCodes.Status301MovedPermanently&quot;/&gt;) to the specified &lt;paramref name=&quot;pageName&quot;/&gt; /// using the specified &lt;paramref name=&quot;pageHandler&quot;/&gt;. /// &lt;/summary&gt; /// &lt;param name=&quot;pageName&quot;&gt;The name of the page.&lt;/param&gt; /// &lt;param name=&quot;pageHandler&quot;&gt;The page handler to redirect to.&lt;/param&gt; /// &lt;returns&gt;The &lt;see cref=&quot;RedirectToPageResult&quot;/&gt; with &lt;see cref=&quot;RedirectToPageResult.Permanent&quot;/&gt; set.&lt;/returns&gt; [NonAction] public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string? pageHandler) =&gt; RedirectToPagePermanent(pageName, pageHandler, routeValues: null, fragment: null);View remainder of file in raw view You can’t perform that action at this time.